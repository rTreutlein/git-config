
==================== FINAL INTERFACE ====================
2017-03-21 09:56:50.469045219 UTC

interface main@main:Main 8002
  interface hash: 2d3afb4a169262d5409eabd88b3287aa
  ABI hash: 543ca7ffa71e6137fe21e6e0a68c34c8
  export-list hash: 407ee59db9b45371dcbe3b6a0f073c49
  orphan hash: efa85277273fedfce795226f2faa1637
  flag hash: 1bc1b402c9f7e9407f6b344b1d1581a7
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: X11-1.8@X11-1.8-KCXuJxzYJCz57Ju2Daz1Tk
                      X11-xft-0.3.1@X11-xft-0.3.1-INLmGoRGz48E3XpLBPB679
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      data-default-0.7.1.1@data-default-0.7.1.1-7EGYJX2YWqWJRbPFUHNoCr
                      data-default-class-0.1.2.0@data-default-class-0.1.2.0-GsXqKN6o1X9jr0fF5qCVD
                      data-default-instances-containers-0.0.1@data-default-instances-containers-0.0.1-bob6IQGdJq92c061H46zK
                      data-default-instances-dlist-0.0.1@data-default-instances-dlist-0.0.1-FKnZBeovJMk4M89wQxDhjl
                      data-default-instances-old-locale-0.0.1@data-default-instances-old-locale-0.0.1-9zaGDEmgOixKkmLylWdN5l
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD
                      extensible-exceptions-0.1.1.4@extensible-exceptions-0.1.1.4-IyAM3ARTqH7BVZ5oHMMtXH
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      old-locale-1.0.0.7@old-locale-1.0.0.7-KGBP1BSKxH5GCm0LnZP04j
                      process-1.4.3.0@process-1.4.3.0
                      setlocale-1.0.0.4@setlocale-1.0.0.4-JWZDTvXDEj0A24mpOycDUl
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.1@unix-2.7.2.1
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-1DpjxLeTvGg7ttZZojxJR5
                      xmonad-0.13@xmonad-0.13-2oJC5AWRw6JCDK3Fjd5bOl
                      xmonad-contrib-0.13@xmonad-contrib-0.13-GPqnbDS0WtHIkSTkFZGEcF
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         data-default-instances-containers-0.0.1@data-default-instances-containers-0.0.1-bob6IQGdJq92c061H46zK:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1@data-default-instances-dlist-0.0.1-FKnZBeovJMk4M89wQxDhjl:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1@data-default-instances-old-locale-0.0.1-9zaGDEmgOixKkmLylWdN5l:Data.Default.Instances.OldLocale
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         xmonad-0.13@xmonad-0.13-2oJC5AWRw6JCDK3Fjd5bOl:XMonad.Config
         xmonad-contrib-0.13@xmonad-contrib-0.13-GPqnbDS0WtHIkSTkFZGEcF:XMonad.Util.NamedActions
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD:Data.DList
import  -/  X11-1.8@X11-1.8-KCXuJxzYJCz57Ju2Daz1Tk:Graphics.X11.Types f0b84b42972e1761dcb7ef20bc07c76e
import  -/  base-4.9.1.0:Data.Bits d707ac81dd0124c7a7fb3234df2c8548
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO.Handle.Text b65719f3b262b071ab1aabeb72fc9d8b
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  data-default-class-0.1.2.0@data-default-class-0.1.2.0-GsXqKN6o1X9jr0fF5qCVD:Data.Default.Class 9c68cbd95caee85701a573292e4f13b7
import  -/  xmonad-0.13@xmonad-0.13-2oJC5AWRw6JCDK3Fjd5bOl:XMonad 05be88af3afba28604a551094b6fd791
import  -/  xmonad-0.13@xmonad-0.13-2oJC5AWRw6JCDK3Fjd5bOl:XMonad.Core fc3c413888b423524ced0eeae2cee4f6
import  -/  xmonad-0.13@xmonad-0.13-2oJC5AWRw6JCDK3Fjd5bOl:XMonad.Main 7a05fecce2efdd0645f3e21fa2249c8d
import  -/  xmonad-0.13@xmonad-0.13-2oJC5AWRw6JCDK3Fjd5bOl:XMonad.ManageHook e6e5cd7b67fae194963b16cc2ec0e7c6
import  -/  xmonad-0.13@xmonad-0.13-2oJC5AWRw6JCDK3Fjd5bOl:XMonad.StackSet c7184e90db9d4309ddf38210110f65e6
import  -/  xmonad-contrib-0.13@xmonad-contrib-0.13-GPqnbDS0WtHIkSTkFZGEcF:XMonad.Actions.SpawnOn 138c8421fda32e993129ed2fc702470f
import  -/  xmonad-contrib-0.13@xmonad-contrib-0.13-GPqnbDS0WtHIkSTkFZGEcF:XMonad.Hooks.DynamicLog c05c25092b5478870edc763d3a3eb590
import  -/  xmonad-contrib-0.13@xmonad-contrib-0.13-GPqnbDS0WtHIkSTkFZGEcF:XMonad.Hooks.ManageDocks 523907c4a1efe64e65769fc324c4cceb
import  -/  xmonad-contrib-0.13@xmonad-contrib-0.13-GPqnbDS0WtHIkSTkFZGEcF:XMonad.Util.EZConfig e575871207c59d41976cd4088b488eb1
import  -/  xmonad-contrib-0.13@xmonad-contrib-0.13-GPqnbDS0WtHIkSTkFZGEcF:XMonad.Util.Run cf7a37c4e2f8d98450fdcacbf2994422
import  -/  xmonad-contrib-0.13@xmonad-contrib-0.13-GPqnbDS0WtHIkSTkFZGEcF:XMonad.Util.Scratchpad 9c9d302f80e0bed325defc5d2e8a3145
e9d8133afea5a1d4d2249aa6330c21a8
  $s$fLayoutClassChoosea ::
    XMonad.Core.LayoutClass
      (XMonad.Layout.Choose
         (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
      GHC.Word.Word64
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (XMonad.Layout.Choose
                       (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                  @ GHC.Word.Word64
                  Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cp1LayoutClass
                  (XMonad.Layout.$fLayoutClassChoosea_$crunLayout
                     @ (XMonad.Layout.Mirror XMonad.Layout.Tall)
                     @ GHC.Word.Word64
                     @ XMonad.Layout.Full
                     Main.$s$fLayoutClassChoosea3
                     (XMonad.Layout.$fLayoutClassFulla @ GHC.Word.Word64))
                  (XMonad.Layout.$fLayoutClassChoosea_$cdoLayout
                     @ (XMonad.Layout.Mirror XMonad.Layout.Tall)
                     @ GHC.Word.Word64
                     @ XMonad.Layout.Full
                     Main.$s$fLayoutClassChoosea3
                     (XMonad.Layout.$fLayoutClassFulla @ GHC.Word.Word64))
                  Main.$s$fLayoutClassChoosea2
                  (XMonad.Layout.$fLayoutClassChoosea_$cemptyLayout
                     @ (XMonad.Layout.Mirror XMonad.Layout.Tall)
                     @ GHC.Word.Word64
                     @ XMonad.Layout.Full
                     Main.$s$fLayoutClassChoosea3
                     (XMonad.Layout.$fLayoutClassFulla @ GHC.Word.Word64))
                  (XMonad.Layout.$fLayoutClassChoosea_$chandleMessage
                     @ (XMonad.Layout.Mirror XMonad.Layout.Tall)
                     @ GHC.Word.Word64
                     @ XMonad.Layout.Full
                     Main.$s$fLayoutClassChoosea3
                     (XMonad.Layout.$fLayoutClassFulla @ GHC.Word.Word64))
                  Main.$s$fLayoutClassChoosea1
                  Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cdescription -}
78323f7377f2501f9d6ed3c91b930d77
  $s$fLayoutClassChoosea1 ::
    XMonad.Layout.Choose
      (XMonad.Layout.Mirror XMonad.Layout.Tall)
      XMonad.Layout.Full
      GHC.Word.Word64
    -> XMonad.Core.SomeMessage
    -> GHC.Base.Maybe
         (XMonad.Layout.Choose
            (XMonad.Layout.Mirror XMonad.Layout.Tall)
            XMonad.Layout.Full
            GHC.Word.Word64)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds4 :: XMonad.Layout.Choose
                             (XMonad.Layout.Mirror XMonad.Layout.Tall)
                             XMonad.Layout.Full
                             GHC.Word.Word64)
                   (ds5 :: XMonad.Core.SomeMessage) ->
                 GHC.Base.Nothing
                   @ (XMonad.Layout.Choose
                        (XMonad.Layout.Mirror XMonad.Layout.Tall)
                        XMonad.Layout.Full
                        GHC.Word.Word64)) -}
e1f6511d10482b1ee2e03d461fcf1aa7
  $s$fLayoutClassChoosea2 ::
    XMonad.Layout.Choose
      (XMonad.Layout.Mirror XMonad.Layout.Tall)
      XMonad.Layout.Full
      GHC.Word.Word64
    -> Graphics.X11.Xlib.Types.Rectangle
    -> XMonad.StackSet.Stack GHC.Word.Word64
    -> [(GHC.Word.Word64, Graphics.X11.Xlib.Types.Rectangle)]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><L,1*U(U,A,A)>m2,
     Unfolding: InlineRule (3, True, False)
                (\ (ds4 :: XMonad.Layout.Choose
                             (XMonad.Layout.Mirror XMonad.Layout.Tall)
                             XMonad.Layout.Full
                             GHC.Word.Word64)
                   (r1 :: Graphics.X11.Xlib.Types.Rectangle)
                   (s :: XMonad.StackSet.Stack GHC.Word.Word64) ->
                 GHC.Types.:
                   @ (GHC.Word.Word64, Graphics.X11.Xlib.Types.Rectangle)
                   (XMonad.StackSet.focus @ GHC.Word.Word64 s, r1)
                   (GHC.Types.[]
                      @ (GHC.Word.Word64, Graphics.X11.Xlib.Types.Rectangle))) -}
7d52d4ba3330603e8c0b44a4eee38513
  $s$fLayoutClassChoosea3 ::
    XMonad.Core.LayoutClass
      (XMonad.Layout.Mirror XMonad.Layout.Tall) GHC.Word.Word64
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fLayoutClassChoosea_$s$fLayoutClassMirrora -}
b1974f2c1ab4f7e9433d9b603ecc2695
  $s$fLayoutClassChoosea4 ::
    [XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [XMonad.Layout.Mirror
                              XMonad.Layout.Tall GHC.Word.Word64])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)
                   (\ (w2 :: XMonad.Layout.Mirror
                               XMonad.Layout.Tall GHC.Word.Word64) ->
                    XMonad.Layout.$w$cshowsPrec1
                      @ XMonad.Layout.Tall
                      @ GHC.Word.Word64
                      (XMonad.Layout.$fShowTall @ GHC.Word.Word64)
                      0#
                      w2)
                   eta
                   eta1) -}
b3b280a028a9f05e97b1b4e079ec1c46
  $s$fLayoutClassChoosea5 ::
    XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U,U)>,
     Unfolding: (\ (x :: XMonad.Layout.Mirror
                           XMonad.Layout.Tall GHC.Word.Word64) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XMonad.Layout.$fShowMirror1
                   (case x `cast`
                         (XMonad.Layout.N:Mirror[0]
                              <XMonad.Layout.Tall>_R <GHC.Word.Word64>_N) of ww2 { XMonad.Layout.Tall ww3 ww4 ww5 ww6 ww7 ->
                    XMonad.Layout.$w$cshowsPrec2
                      @ GHC.Word.Word64
                      11#
                      ww3
                      ww4
                      ww5
                      ww6
                      ww7
                      (GHC.Types.[] @ GHC.Types.Char) })) -}
922181c0dcf2850cb2653a80815dce1d
  $s$fLayoutClassChoosea6 ::
    XMonad.Core.LayoutClass
      (XMonad.Layout.Choose
         XMonad.Layout.Tall
         (XMonad.Layout.Choose
            (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
      GHC.Word.Word64
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (XMonad.Layout.Choose
                       XMonad.Layout.Tall
                       (XMonad.Layout.Choose
                          (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                  @ GHC.Word.Word64
                  Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cp1LayoutClass1
                  (XMonad.Layout.$fLayoutClassChoosea_$crunLayout
                     @ XMonad.Layout.Tall
                     @ GHC.Word.Word64
                     @ (XMonad.Layout.Choose
                          (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                     (XMonad.Layout.$fLayoutClassTalla @ GHC.Word.Word64)
                     Main.$s$fLayoutClassChoosea9)
                  (XMonad.Layout.$fLayoutClassChoosea_$cdoLayout
                     @ XMonad.Layout.Tall
                     @ GHC.Word.Word64
                     @ (XMonad.Layout.Choose
                          (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                     (XMonad.Layout.$fLayoutClassTalla @ GHC.Word.Word64)
                     Main.$s$fLayoutClassChoosea9)
                  Main.$s$fLayoutClassChoosea8
                  (XMonad.Layout.$fLayoutClassChoosea_$cemptyLayout
                     @ XMonad.Layout.Tall
                     @ GHC.Word.Word64
                     @ (XMonad.Layout.Choose
                          (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                     (XMonad.Layout.$fLayoutClassTalla @ GHC.Word.Word64)
                     Main.$s$fLayoutClassChoosea9)
                  (XMonad.Layout.$fLayoutClassChoosea_$chandleMessage
                     @ XMonad.Layout.Tall
                     @ GHC.Word.Word64
                     @ (XMonad.Layout.Choose
                          (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                     (XMonad.Layout.$fLayoutClassTalla @ GHC.Word.Word64)
                     Main.$s$fLayoutClassChoosea9)
                  Main.$s$fLayoutClassChoosea7
                  Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cdescription1 -}
3886322d9959e33525b596a0aa8c91ba
  $s$fLayoutClassChoosea7 ::
    XMonad.Layout.Choose
      XMonad.Layout.Tall
      (XMonad.Layout.Choose
         (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
      GHC.Word.Word64
    -> XMonad.Core.SomeMessage
    -> GHC.Base.Maybe
         (XMonad.Layout.Choose
            XMonad.Layout.Tall
            (XMonad.Layout.Choose
               (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
            GHC.Word.Word64)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds4 :: XMonad.Layout.Choose
                             XMonad.Layout.Tall
                             (XMonad.Layout.Choose
                                (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                             GHC.Word.Word64)
                   (ds5 :: XMonad.Core.SomeMessage) ->
                 GHC.Base.Nothing
                   @ (XMonad.Layout.Choose
                        XMonad.Layout.Tall
                        (XMonad.Layout.Choose
                           (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                        GHC.Word.Word64)) -}
4f0b2ab37fefc3688335405df3f3a4a3
  $s$fLayoutClassChoosea8 ::
    XMonad.Layout.Choose
      XMonad.Layout.Tall
      (XMonad.Layout.Choose
         (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
      GHC.Word.Word64
    -> Graphics.X11.Xlib.Types.Rectangle
    -> XMonad.StackSet.Stack GHC.Word.Word64
    -> [(GHC.Word.Word64, Graphics.X11.Xlib.Types.Rectangle)]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><L,1*U(U,A,A)>m2,
     Unfolding: InlineRule (3, True, False)
                (\ (ds4 :: XMonad.Layout.Choose
                             XMonad.Layout.Tall
                             (XMonad.Layout.Choose
                                (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                             GHC.Word.Word64)
                   (r1 :: Graphics.X11.Xlib.Types.Rectangle)
                   (s :: XMonad.StackSet.Stack GHC.Word.Word64) ->
                 GHC.Types.:
                   @ (GHC.Word.Word64, Graphics.X11.Xlib.Types.Rectangle)
                   (XMonad.StackSet.focus @ GHC.Word.Word64 s, r1)
                   (GHC.Types.[]
                      @ (GHC.Word.Word64, Graphics.X11.Xlib.Types.Rectangle))) -}
522c319295753fab82faa321edf1df52
  $s$fLayoutClassChoosea9 ::
    XMonad.Core.LayoutClass
      (XMonad.Layout.Choose
         (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
      GHC.Word.Word64
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fLayoutClassChoosea -}
48ecf67ccf9c613065c7996ab835c847
  $s$fLayoutClassChoosea_$dShow ::
    GHC.Show.Show (XMonad.Layout.Full GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (XMonad.Layout.$fShowFull @ GHC.Word.Word64) -}
d01307d0e50e871a3349a35d9906f735
  $s$fLayoutClassChoosea_$dShow1 ::
    GHC.Show.Show
      (XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fLayoutClassChoosea_$s$fShowMirror -}
02c76eef30bc80d9e0d8d78564f4ad29
  $s$fLayoutClassChoosea_$dShow2 ::
    GHC.Show.Show (XMonad.Layout.Tall GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (XMonad.Layout.$fShowTall @ GHC.Word.Word64) -}
9c90ddf61d89a1219033189e77ca9f92
  $s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cdescription ::
    XMonad.Layout.Choose
      (XMonad.Layout.Mirror XMonad.Layout.Tall)
      XMonad.Layout.Full
      GHC.Word.Word64
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SLL),1*U(1*U,A,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: XMonad.Layout.Choose
                            (XMonad.Layout.Mirror XMonad.Layout.Tall)
                            XMonad.Layout.Full
                            GHC.Word.Word64) ->
                 case ds of wild { XMonad.Layout.Choose ds1 l1 ds2 ->
                 case ds1 of wild1 {
                   XMonad.Layout.L
                   -> Main.$s$fLayoutClassChoosea_$s$fLayoutClassMirrora_$cdescription
                        l1
                   XMonad.Layout.R
                   -> XMonad.Layout.$fLayoutClassFulla_$cdescription
                        @ GHC.Word.Word64
                        ds2 } }) -}
02b2ecdee9d256e9c7ec31c5bbad1d0f
  $s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cdescription1 ::
    XMonad.Layout.Choose
      XMonad.Layout.Tall
      (XMonad.Layout.Choose
         (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
      GHC.Word.Word64
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SLL),1*U(1*U,A,1*U(1*U,A,1*H))>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: XMonad.Layout.Choose
                            XMonad.Layout.Tall
                            (XMonad.Layout.Choose
                               (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                            GHC.Word.Word64) ->
                 case ds of wild { XMonad.Layout.Choose ds1 l1 ds2 ->
                 case ds1 of wild1 {
                   XMonad.Layout.L
                   -> XMonad.Layout.$fLayoutClassTalla_$cdescription
                        @ GHC.Word.Word64
                        l1
                   XMonad.Layout.R
                   -> Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cdescription
                        ds2 } }) -}
8cf13c9d4955bd8d416014f04b0f46bd
  $s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cp1LayoutClass ::
    GHC.Show.Show
      (XMonad.Layout.Choose
         (XMonad.Layout.Mirror XMonad.Layout.Tall)
         XMonad.Layout.Full
         GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fLayoutClassChoosea_$s$fShowChoose -}
4945c00ab0fc96f842de672f9254ef17
  $s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cp1LayoutClass1 ::
    GHC.Show.Show
      (XMonad.Layout.Choose
         XMonad.Layout.Tall
         (XMonad.Layout.Choose
            (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
         GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fLayoutClassChoosea_$s$fShowChoose1 -}
a4bb80beeabc83ba7bbfff1f596d19d9
  $s$fLayoutClassChoosea_$s$fLayoutClassMirrora ::
    XMonad.Core.LayoutClass
      (XMonad.Layout.Mirror XMonad.Layout.Tall) GHC.Word.Word64
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (XMonad.Layout.Mirror XMonad.Layout.Tall)
                  @ GHC.Word.Word64
                  Main.$s$fLayoutClassChoosea_$dShow1
                  (XMonad.Layout.$fLayoutClassMirrora_$crunLayout
                     @ XMonad.Layout.Tall
                     @ GHC.Word.Word64
                     (XMonad.Layout.$fLayoutClassTalla @ GHC.Word.Word64))
                  (XMonad.Layout.$fLayoutClassMirrora_$cdoLayout
                     @ XMonad.Layout.Tall
                     @ GHC.Word.Word64
                     (XMonad.Layout.$fLayoutClassTalla @ GHC.Word.Word64))
                  Main.$s$fLayoutClassChoosea_$s$fLayoutClassMirrora_$cpureLayout
                  (XMonad.Layout.$fLayoutClassMirrora_$cemptyLayout
                     @ XMonad.Layout.Tall
                     @ GHC.Word.Word64
                     (XMonad.Layout.$fLayoutClassTalla @ GHC.Word.Word64))
                  (XMonad.Layout.$fLayoutClassMirrora_$chandleMessage
                     @ XMonad.Layout.Tall
                     @ GHC.Word.Word64
                     (XMonad.Layout.$fLayoutClassTalla @ GHC.Word.Word64))
                  Main.$s$fLayoutClassChoosea_$s$fLayoutClassMirrora_$cpureMessage
                  Main.$s$fLayoutClassChoosea_$s$fLayoutClassMirrora_$cdescription -}
d9bf31eb7b89ad9af0eaf9a4d80d9c28
  $s$fLayoutClassChoosea_$s$fLayoutClassMirrora_$cdescription ::
    XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: XMonad.Layout.Mirror
                            XMonad.Layout.Tall GHC.Word.Word64) ->
                 GHC.CString.unpackAppendCString#
                   "Mirror "#
                   (XMonad.Layout.$fLayoutClassTalla_$cdescription
                      @ GHC.Word.Word64
                      ds
                        `cast`
                      (XMonad.Layout.N:Mirror[0]
                           <XMonad.Layout.Tall>_R <GHC.Word.Word64>_N))) -}
dbdbd4b6f39bd8e9af624302e4ba558a
  $s$fLayoutClassChoosea_$s$fLayoutClassMirrora_$cpureLayout ::
    XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64
    -> Graphics.X11.Xlib.Types.Rectangle
    -> XMonad.StackSet.Stack GHC.Word.Word64
    -> [(GHC.Word.Word64, Graphics.X11.Xlib.Types.Rectangle)]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><L,1*U(U,A,A)>m2,
     Unfolding: InlineRule (3, True, False)
                (\ (ds4 :: XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)
                   (r :: Graphics.X11.Xlib.Types.Rectangle)
                   (s :: XMonad.StackSet.Stack GHC.Word.Word64) ->
                 GHC.Types.:
                   @ (GHC.Word.Word64, Graphics.X11.Xlib.Types.Rectangle)
                   (XMonad.StackSet.focus @ GHC.Word.Word64 s, r)
                   (GHC.Types.[]
                      @ (GHC.Word.Word64, Graphics.X11.Xlib.Types.Rectangle))) -}
90dde826be90970be8e1242a43d696cd
  $s$fLayoutClassChoosea_$s$fLayoutClassMirrora_$cpureMessage ::
    XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64
    -> XMonad.Core.SomeMessage
    -> GHC.Base.Maybe
         (XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds4 :: XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)
                   (ds5 :: XMonad.Core.SomeMessage) ->
                 GHC.Base.Nothing
                   @ (XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)) -}
6801c5beaff2d92e2607699919ff46cb
  $s$fLayoutClassChoosea_$s$fShowChoose ::
    GHC.Show.Show
      (XMonad.Layout.Choose
         (XMonad.Layout.Mirror XMonad.Layout.Tall)
         XMonad.Layout.Full
         GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (XMonad.Layout.Choose
                       (XMonad.Layout.Mirror XMonad.Layout.Tall)
                       XMonad.Layout.Full
                       GHC.Word.Word64)
                  (XMonad.Layout.$fShowChoose_$cshowsPrec
                     @ (XMonad.Layout.Mirror XMonad.Layout.Tall)
                     @ XMonad.Layout.Full
                     @ GHC.Word.Word64
                     Main.$s$fLayoutClassChoosea_$dShow
                     Main.$s$fLayoutClassChoosea_$dShow1)
                  Main.$s$fLayoutClassChoosea_$s$fShowChoose_$cshow
                  Main.$s$fLayoutClassChoosea_$s$fShowChoose_$cshowList -}
5e0f9a839ed304be97f92058df32e9c6
  $s$fLayoutClassChoosea_$s$fShowChoose1 ::
    GHC.Show.Show
      (XMonad.Layout.Choose
         XMonad.Layout.Tall
         (XMonad.Layout.Choose
            (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
         GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (XMonad.Layout.Choose
                       XMonad.Layout.Tall
                       (XMonad.Layout.Choose
                          (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                       GHC.Word.Word64)
                  (XMonad.Layout.$fShowChoose_$cshowsPrec
                     @ XMonad.Layout.Tall
                     @ (XMonad.Layout.Choose
                          (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                     @ GHC.Word.Word64
                     Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cp1LayoutClass
                     Main.$s$fLayoutClassChoosea_$dShow2)
                  Main.$s$fLayoutClassChoosea_$s$fShowChoose_$cshow1
                  Main.$s$fLayoutClassChoosea_$s$fShowChoose_$cshowList1 -}
043e656f323909f6dc6273cd4e788fe2
  $s$fLayoutClassChoosea_$s$fShowChoose_$cshow ::
    XMonad.Layout.Choose
      (XMonad.Layout.Mirror XMonad.Layout.Tall)
      XMonad.Layout.Full
      GHC.Word.Word64
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: XMonad.Layout.Choose
                           (XMonad.Layout.Mirror XMonad.Layout.Tall)
                           XMonad.Layout.Full
                           GHC.Word.Word64) ->
                 XMonad.Layout.$fShowChoose_$cshowsPrec
                   @ (XMonad.Layout.Mirror XMonad.Layout.Tall)
                   @ XMonad.Layout.Full
                   @ GHC.Word.Word64
                   Main.$s$fLayoutClassChoosea_$dShow
                   Main.$s$fLayoutClassChoosea_$dShow1
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d23e016bf0d5f7ab5a3b97fc682115a3
  $s$fLayoutClassChoosea_$s$fShowChoose_$cshow1 ::
    XMonad.Layout.Choose
      XMonad.Layout.Tall
      (XMonad.Layout.Choose
         (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
      GHC.Word.Word64
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: XMonad.Layout.Choose
                           XMonad.Layout.Tall
                           (XMonad.Layout.Choose
                              (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                           GHC.Word.Word64) ->
                 XMonad.Layout.$fShowChoose_$cshowsPrec
                   @ XMonad.Layout.Tall
                   @ (XMonad.Layout.Choose
                        (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                   @ GHC.Word.Word64
                   Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cp1LayoutClass
                   Main.$s$fLayoutClassChoosea_$dShow2
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
16ac97b9b65b4f0bd05af92eaa2da18c
  $s$fLayoutClassChoosea_$s$fShowChoose_$cshowList ::
    [XMonad.Layout.Choose
       (XMonad.Layout.Mirror XMonad.Layout.Tall)
       XMonad.Layout.Full
       GHC.Word.Word64]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [XMonad.Layout.Choose
                              (XMonad.Layout.Mirror XMonad.Layout.Tall)
                              XMonad.Layout.Full
                              GHC.Word.Word64])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (XMonad.Layout.Choose
                        (XMonad.Layout.Mirror XMonad.Layout.Tall)
                        XMonad.Layout.Full
                        GHC.Word.Word64)
                   (XMonad.Layout.$fShowChoose_$cshowsPrec
                      @ (XMonad.Layout.Mirror XMonad.Layout.Tall)
                      @ XMonad.Layout.Full
                      @ GHC.Word.Word64
                      Main.$s$fLayoutClassChoosea_$dShow
                      Main.$s$fLayoutClassChoosea_$dShow1
                      XMonad.Layout.$fShowChoose1)
                   eta
                   eta1) -}
cc6df33dc33cfa2ba79937f48973c713
  $s$fLayoutClassChoosea_$s$fShowChoose_$cshowList1 ::
    [XMonad.Layout.Choose
       XMonad.Layout.Tall
       (XMonad.Layout.Choose
          (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
       GHC.Word.Word64]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [XMonad.Layout.Choose
                              XMonad.Layout.Tall
                              (XMonad.Layout.Choose
                                 (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                              GHC.Word.Word64])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (XMonad.Layout.Choose
                        XMonad.Layout.Tall
                        (XMonad.Layout.Choose
                           (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                        GHC.Word.Word64)
                   (XMonad.Layout.$fShowChoose_$cshowsPrec
                      @ XMonad.Layout.Tall
                      @ (XMonad.Layout.Choose
                           (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                      @ GHC.Word.Word64
                      Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cp1LayoutClass
                      Main.$s$fLayoutClassChoosea_$dShow2
                      XMonad.Layout.$fShowChoose1)
                   eta
                   eta1) -}
f2a8fd13802cd1ee795b68df9fbd595e
  $s$fLayoutClassChoosea_$s$fShowMirror ::
    GHC.Show.Show
      (XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)
                  (XMonad.Layout.$fShowMirror_$cshowsPrec
                     @ XMonad.Layout.Tall
                     @ GHC.Word.Word64
                     Main.$s$fLayoutClassChoosea_$dShow2)
                  Main.$s$fLayoutClassChoosea5
                  Main.$s$fLayoutClassChoosea4 -}
4e3000440cc478a2ba40ff156d215d80
  $s$fLayoutClassModifiedLayouta ::
    XMonad.Core.LayoutClass
      (XMonad.Layout.LayoutModifier.ModifiedLayout
         XMonad.Hooks.ManageDocks.AvoidStruts
         (XMonad.Layout.Choose
            XMonad.Layout.Tall
            (XMonad.Layout.Choose
               (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)))
      GHC.Word.Word64
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (XMonad.Layout.LayoutModifier.ModifiedLayout
                       XMonad.Hooks.ManageDocks.AvoidStruts
                       (XMonad.Layout.Choose
                          XMonad.Layout.Tall
                          (XMonad.Layout.Choose
                             (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)))
                  @ GHC.Word.Word64
                  Main.$s$fLayoutClassModifiedLayouta_$s$fLayoutClassModifiedLayouta_$cp1LayoutClass
                  (XMonad.Layout.LayoutModifier.$fLayoutClassModifiedLayouta_$crunLayout
                     @ XMonad.Hooks.ManageDocks.AvoidStruts
                     @ GHC.Word.Word64
                     @ (XMonad.Layout.Choose
                          XMonad.Layout.Tall
                          (XMonad.Layout.Choose
                             (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                     (XMonad.Hooks.ManageDocks.$fLayoutModifierAvoidStrutsa
                        @ GHC.Word.Word64)
                     Main.$s$fLayoutClassModifiedLayouta4)
                  (XMonad.Layout.LayoutModifier.$fLayoutClassModifiedLayouta_$cdoLayout
                     @ XMonad.Hooks.ManageDocks.AvoidStruts
                     @ GHC.Word.Word64
                     @ (XMonad.Layout.Choose
                          XMonad.Layout.Tall
                          (XMonad.Layout.Choose
                             (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                     (XMonad.Hooks.ManageDocks.$fLayoutModifierAvoidStrutsa
                        @ GHC.Word.Word64)
                     Main.$s$fLayoutClassModifiedLayouta4)
                  Main.$s$fLayoutClassModifiedLayouta3
                  (XMonad.Layout.LayoutModifier.$fLayoutClassModifiedLayouta_$cemptyLayout
                     @ XMonad.Hooks.ManageDocks.AvoidStruts
                     @ GHC.Word.Word64
                     @ (XMonad.Layout.Choose
                          XMonad.Layout.Tall
                          (XMonad.Layout.Choose
                             (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                     (XMonad.Hooks.ManageDocks.$fLayoutModifierAvoidStrutsa
                        @ GHC.Word.Word64)
                     Main.$s$fLayoutClassModifiedLayouta4)
                  (XMonad.Layout.LayoutModifier.$fLayoutClassModifiedLayouta_$chandleMessage
                     @ XMonad.Hooks.ManageDocks.AvoidStruts
                     @ GHC.Word.Word64
                     @ (XMonad.Layout.Choose
                          XMonad.Layout.Tall
                          (XMonad.Layout.Choose
                             (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                     (XMonad.Hooks.ManageDocks.$fLayoutModifierAvoidStrutsa
                        @ GHC.Word.Word64)
                     Main.$s$fLayoutClassModifiedLayouta4)
                  Main.$s$fLayoutClassModifiedLayouta2
                  Main.$s$fLayoutClassModifiedLayouta1 -}
6af4566540b43a89db8e33fe75a65302
  $s$fLayoutClassModifiedLayouta1 ::
    XMonad.Layout.LayoutModifier.ModifiedLayout
      XMonad.Hooks.ManageDocks.AvoidStruts
      (XMonad.Layout.Choose
         XMonad.Layout.Tall
         (XMonad.Layout.Choose
            (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
      GHC.Word.Word64
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S(LS(SLL)),1*U(A,1*U(1*U,A,1*U(1*U,A,1*H)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: XMonad.Layout.LayoutModifier.ModifiedLayout
                            XMonad.Hooks.ManageDocks.AvoidStruts
                            (XMonad.Layout.Choose
                               XMonad.Layout.Tall
                               (XMonad.Layout.Choose
                                  (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                            GHC.Word.Word64) ->
                 case ds of wild { XMonad.Layout.LayoutModifier.ModifiedLayout m1 l1 ->
                 Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cdescription1
                   l1 }) -}
a5acf24d9db5896bbc1a49f2273c3ee0
  $s$fLayoutClassModifiedLayouta2 ::
    XMonad.Layout.LayoutModifier.ModifiedLayout
      XMonad.Hooks.ManageDocks.AvoidStruts
      (XMonad.Layout.Choose
         XMonad.Layout.Tall
         (XMonad.Layout.Choose
            (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
      GHC.Word.Word64
    -> XMonad.Core.SomeMessage
    -> GHC.Base.Maybe
         (XMonad.Layout.LayoutModifier.ModifiedLayout
            XMonad.Hooks.ManageDocks.AvoidStruts
            (XMonad.Layout.Choose
               XMonad.Layout.Tall
               (XMonad.Layout.Choose
                  (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
            GHC.Word.Word64)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds4 :: XMonad.Layout.LayoutModifier.ModifiedLayout
                             XMonad.Hooks.ManageDocks.AvoidStruts
                             (XMonad.Layout.Choose
                                XMonad.Layout.Tall
                                (XMonad.Layout.Choose
                                   (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                             GHC.Word.Word64)
                   (ds5 :: XMonad.Core.SomeMessage) ->
                 GHC.Base.Nothing
                   @ (XMonad.Layout.LayoutModifier.ModifiedLayout
                        XMonad.Hooks.ManageDocks.AvoidStruts
                        (XMonad.Layout.Choose
                           XMonad.Layout.Tall
                           (XMonad.Layout.Choose
                              (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                        GHC.Word.Word64)) -}
5dc620759b5ce96bc85bd913dee4ff9c
  $s$fLayoutClassModifiedLayouta3 ::
    XMonad.Layout.LayoutModifier.ModifiedLayout
      XMonad.Hooks.ManageDocks.AvoidStruts
      (XMonad.Layout.Choose
         XMonad.Layout.Tall
         (XMonad.Layout.Choose
            (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
      GHC.Word.Word64
    -> Graphics.X11.Xlib.Types.Rectangle
    -> XMonad.StackSet.Stack GHC.Word.Word64
    -> [(GHC.Word.Word64, Graphics.X11.Xlib.Types.Rectangle)]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><L,1*U(U,A,A)>m2,
     Unfolding: InlineRule (3, True, False)
                (\ (ds4 :: XMonad.Layout.LayoutModifier.ModifiedLayout
                             XMonad.Hooks.ManageDocks.AvoidStruts
                             (XMonad.Layout.Choose
                                XMonad.Layout.Tall
                                (XMonad.Layout.Choose
                                   (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                             GHC.Word.Word64)
                   (r :: Graphics.X11.Xlib.Types.Rectangle)
                   (s :: XMonad.StackSet.Stack GHC.Word.Word64) ->
                 GHC.Types.:
                   @ (GHC.Word.Word64, Graphics.X11.Xlib.Types.Rectangle)
                   (XMonad.StackSet.focus @ GHC.Word.Word64 s, r)
                   (GHC.Types.[]
                      @ (GHC.Word.Word64, Graphics.X11.Xlib.Types.Rectangle))) -}
34756d6fe0dc7b0a913f71ed21507771
  $s$fLayoutClassModifiedLayouta4 ::
    XMonad.Core.LayoutClass
      (XMonad.Layout.Choose
         XMonad.Layout.Tall
         (XMonad.Layout.Choose
            (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
      GHC.Word.Word64
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fLayoutClassChoosea6 -}
966ac5de1b204f3e3a2ae53a098568c8
  $s$fLayoutClassModifiedLayouta_$dShow1 ::
    GHC.Show.Show
      (XMonad.Hooks.ManageDocks.AvoidStruts GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (XMonad.Hooks.ManageDocks.$fShowAvoidStruts @ GHC.Word.Word64) -}
b49b24a48f61d19ef511cecd33b087f1
  $s$fLayoutClassModifiedLayouta_$s$fLayoutClassModifiedLayouta_$cp1LayoutClass ::
    GHC.Show.Show
      (XMonad.Layout.LayoutModifier.ModifiedLayout
         XMonad.Hooks.ManageDocks.AvoidStruts
         (XMonad.Layout.Choose
            XMonad.Layout.Tall
            (XMonad.Layout.Choose
               (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
         GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fLayoutClassModifiedLayouta_$s$fShowModifiedLayout -}
db76b45a99ad4848f36dee5865797a99
  $s$fLayoutClassModifiedLayouta_$s$fShowModifiedLayout ::
    GHC.Show.Show
      (XMonad.Layout.LayoutModifier.ModifiedLayout
         XMonad.Hooks.ManageDocks.AvoidStruts
         (XMonad.Layout.Choose
            XMonad.Layout.Tall
            (XMonad.Layout.Choose
               (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
         GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (XMonad.Layout.LayoutModifier.ModifiedLayout
                       XMonad.Hooks.ManageDocks.AvoidStruts
                       (XMonad.Layout.Choose
                          XMonad.Layout.Tall
                          (XMonad.Layout.Choose
                             (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                       GHC.Word.Word64)
                  (XMonad.Layout.LayoutModifier.$fShowModifiedLayout_$cshowsPrec
                     @ XMonad.Hooks.ManageDocks.AvoidStruts
                     @ (XMonad.Layout.Choose
                          XMonad.Layout.Tall
                          (XMonad.Layout.Choose
                             (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                     @ GHC.Word.Word64
                     Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cp1LayoutClass1
                     Main.$s$fLayoutClassModifiedLayouta_$dShow1)
                  Main.$s$fLayoutClassModifiedLayouta_$s$fShowModifiedLayout_$cshow
                  Main.$s$fLayoutClassModifiedLayouta_$s$fShowModifiedLayout_$cshowList -}
f519f1561d110b6e30165c3b000ec770
  $s$fLayoutClassModifiedLayouta_$s$fShowModifiedLayout_$cshow ::
    XMonad.Layout.LayoutModifier.ModifiedLayout
      XMonad.Hooks.ManageDocks.AvoidStruts
      (XMonad.Layout.Choose
         XMonad.Layout.Tall
         (XMonad.Layout.Choose
            (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
      GHC.Word.Word64
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U),1*U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: XMonad.Layout.LayoutModifier.ModifiedLayout
                           XMonad.Hooks.ManageDocks.AvoidStruts
                           (XMonad.Layout.Choose
                              XMonad.Layout.Tall
                              (XMonad.Layout.Choose
                                 (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                           GHC.Word.Word64) ->
                 XMonad.Layout.LayoutModifier.$fShowModifiedLayout_$cshowsPrec
                   @ XMonad.Hooks.ManageDocks.AvoidStruts
                   @ (XMonad.Layout.Choose
                        XMonad.Layout.Tall
                        (XMonad.Layout.Choose
                           (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                   @ GHC.Word.Word64
                   Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cp1LayoutClass1
                   Main.$s$fLayoutClassModifiedLayouta_$dShow1
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
45635e96ddf8499c1568f311962ce7c4
  $s$fLayoutClassModifiedLayouta_$s$fShowModifiedLayout_$cshowList ::
    [XMonad.Layout.LayoutModifier.ModifiedLayout
       XMonad.Hooks.ManageDocks.AvoidStruts
       (XMonad.Layout.Choose
          XMonad.Layout.Tall
          (XMonad.Layout.Choose
             (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
       GHC.Word.Word64]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [XMonad.Layout.LayoutModifier.ModifiedLayout
                              XMonad.Hooks.ManageDocks.AvoidStruts
                              (XMonad.Layout.Choose
                                 XMonad.Layout.Tall
                                 (XMonad.Layout.Choose
                                    (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                              GHC.Word.Word64])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (XMonad.Layout.LayoutModifier.ModifiedLayout
                        XMonad.Hooks.ManageDocks.AvoidStruts
                        (XMonad.Layout.Choose
                           XMonad.Layout.Tall
                           (XMonad.Layout.Choose
                              (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                        GHC.Word.Word64)
                   (XMonad.Layout.LayoutModifier.$fShowModifiedLayout_$cshowsPrec
                      @ XMonad.Hooks.ManageDocks.AvoidStruts
                      @ (XMonad.Layout.Choose
                           XMonad.Layout.Tall
                           (XMonad.Layout.Choose
                              (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                      @ GHC.Word.Word64
                      Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cp1LayoutClass1
                      Main.$s$fLayoutClassModifiedLayouta_$dShow1
                      XMonad.Layout.LayoutModifier.$fShowModifiedLayout1)
                   eta
                   eta1) -}
737c0a5c3adf241e6015658481cd84ee
  $s$fReadChoose ::
    GHC.Read.Read
      (XMonad.Layout.Choose
         (XMonad.Layout.Mirror XMonad.Layout.Tall)
         XMonad.Layout.Full
         GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (XMonad.Layout.Choose
                       (XMonad.Layout.Mirror XMonad.Layout.Tall)
                       XMonad.Layout.Full
                       GHC.Word.Word64)
                  Main.$s$fReadChoose_$s$fReadChoose_$creadsPrec
                  Main.$s$fReadChoose_$s$fReadChoose_$creadList
                  (XMonad.Layout.$fReadChoose_$creadPrec
                     @ (XMonad.Layout.Mirror XMonad.Layout.Tall)
                     @ XMonad.Layout.Full
                     @ GHC.Word.Word64
                     (XMonad.Layout.$fReadFull @ GHC.Word.Word64)
                     Main.$s$fReadChoose1)
                  (XMonad.Layout.$fReadChoose_$creadListPrec
                     @ (XMonad.Layout.Mirror XMonad.Layout.Tall)
                     @ XMonad.Layout.Full
                     @ GHC.Word.Word64
                     (XMonad.Layout.$fReadFull @ GHC.Word.Word64)
                     Main.$s$fReadChoose1) -}
d3b261dcf2386879bd33f78ebbafce1e
  $s$fReadChoose1 ::
    GHC.Read.Read
      (XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fReadChoose_$s$fReadMirror -}
cc043b3c4b4d23b759ab395fdd31ce0d
  $s$fReadChoose2 ::
    GHC.Read.Read
      (XMonad.Layout.Choose
         XMonad.Layout.Tall
         (XMonad.Layout.Choose
            (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
         GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (XMonad.Layout.Choose
                       XMonad.Layout.Tall
                       (XMonad.Layout.Choose
                          (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                       GHC.Word.Word64)
                  Main.$s$fReadChoose_$s$fReadChoose_$creadsPrec1
                  Main.$s$fReadChoose_$s$fReadChoose_$creadList1
                  (XMonad.Layout.$fReadChoose_$creadPrec
                     @ XMonad.Layout.Tall
                     @ (XMonad.Layout.Choose
                          (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                     @ GHC.Word.Word64
                     Main.$s$fReadChoose3
                     (XMonad.Layout.$fReadTall @ GHC.Word.Word64))
                  (XMonad.Layout.$fReadChoose_$creadListPrec
                     @ XMonad.Layout.Tall
                     @ (XMonad.Layout.Choose
                          (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                     @ GHC.Word.Word64
                     Main.$s$fReadChoose3
                     (XMonad.Layout.$fReadTall @ GHC.Word.Word64)) -}
82249f6b7a1a69f5c8e5385861d7399a
  $s$fReadChoose3 ::
    GHC.Read.Read
      (XMonad.Layout.Choose
         (XMonad.Layout.Mirror XMonad.Layout.Tall)
         XMonad.Layout.Full
         GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fReadChoose -}
fe8d3ad8796658ae700491c7db741345
  $s$fReadChoose_$s$fReadChoose_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [XMonad.Layout.Choose
         (XMonad.Layout.Mirror XMonad.Layout.Tall)
         XMonad.Layout.Full
         GHC.Word.Word64]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XMonad.Layout.Choose
                        (XMonad.Layout.Mirror XMonad.Layout.Tall)
                        XMonad.Layout.Full
                        GHC.Word.Word64]
                   (GHC.Read.list1
                      @ (XMonad.Layout.Choose
                           (XMonad.Layout.Mirror XMonad.Layout.Tall)
                           XMonad.Layout.Full
                           GHC.Word.Word64)
                      (XMonad.Layout.$fReadChoose2
                         @ (XMonad.Layout.Mirror XMonad.Layout.Tall)
                         @ XMonad.Layout.Full
                         @ GHC.Word.Word64
                         (XMonad.Layout.$fReadFull @ GHC.Word.Word64)
                         Main.$s$fReadChoose1)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                <XMonad.Layout.Choose
                                   (XMonad.Layout.Mirror XMonad.Layout.Tall)
                                   XMonad.Layout.Full
                                   GHC.Word.Word64>_R))
                      GHC.Read.$fRead()5
                      @ [XMonad.Layout.Choose
                           (XMonad.Layout.Mirror XMonad.Layout.Tall)
                           XMonad.Layout.Full
                           GHC.Word.Word64]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [XMonad.Layout.Choose
                              (XMonad.Layout.Mirror XMonad.Layout.Tall)
                              XMonad.Layout.Full
                              GHC.Word.Word64]))) -}
f04e380da9970d4418861f576c0b74db
  $s$fReadChoose_$s$fReadChoose_$creadList1 ::
    Text.ParserCombinators.ReadP.ReadS
      [XMonad.Layout.Choose
         XMonad.Layout.Tall
         (XMonad.Layout.Choose
            (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
         GHC.Word.Word64]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XMonad.Layout.Choose
                        XMonad.Layout.Tall
                        (XMonad.Layout.Choose
                           (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                        GHC.Word.Word64]
                   (GHC.Read.list1
                      @ (XMonad.Layout.Choose
                           XMonad.Layout.Tall
                           (XMonad.Layout.Choose
                              (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                           GHC.Word.Word64)
                      (XMonad.Layout.$fReadChoose2
                         @ XMonad.Layout.Tall
                         @ (XMonad.Layout.Choose
                              (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                         @ GHC.Word.Word64
                         Main.$s$fReadChoose3
                         (XMonad.Layout.$fReadTall @ GHC.Word.Word64))
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                <XMonad.Layout.Choose
                                   XMonad.Layout.Tall
                                   (XMonad.Layout.Choose
                                      (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                                   GHC.Word.Word64>_R))
                      GHC.Read.$fRead()5
                      @ [XMonad.Layout.Choose
                           XMonad.Layout.Tall
                           (XMonad.Layout.Choose
                              (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                           GHC.Word.Word64]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [XMonad.Layout.Choose
                              XMonad.Layout.Tall
                              (XMonad.Layout.Choose
                                 (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                              GHC.Word.Word64]))) -}
c80c492b62f8f957b899aa25c24c38d7
  $s$fReadChoose_$s$fReadChoose_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (XMonad.Layout.Choose
            (XMonad.Layout.Mirror XMonad.Layout.Tall)
            XMonad.Layout.Full
            GHC.Word.Word64)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (XMonad.Layout.Choose
                        (XMonad.Layout.Mirror XMonad.Layout.Tall)
                        XMonad.Layout.Full
                        GHC.Word.Word64)
                   ((XMonad.Layout.$fReadChoose2
                       @ (XMonad.Layout.Mirror XMonad.Layout.Tall)
                       @ XMonad.Layout.Full
                       @ GHC.Word.Word64
                       (XMonad.Layout.$fReadFull @ GHC.Word.Word64)
                       Main.$s$fReadChoose1
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <XMonad.Layout.Choose
                            (XMonad.Layout.Mirror XMonad.Layout.Tall)
                            XMonad.Layout.Full
                            GHC.Word.Word64>_R)
                      @ (XMonad.Layout.Choose
                           (XMonad.Layout.Mirror XMonad.Layout.Tall)
                           XMonad.Layout.Full
                           GHC.Word.Word64)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (XMonad.Layout.Choose
                              (XMonad.Layout.Mirror XMonad.Layout.Tall)
                              XMonad.Layout.Full
                              GHC.Word.Word64)))) -}
40e1a4371f91352b8e1ccb6c7f733dff
  $s$fReadChoose_$s$fReadChoose_$creadsPrec1 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (XMonad.Layout.Choose
            XMonad.Layout.Tall
            (XMonad.Layout.Choose
               (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
            GHC.Word.Word64)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (XMonad.Layout.Choose
                        XMonad.Layout.Tall
                        (XMonad.Layout.Choose
                           (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                        GHC.Word.Word64)
                   ((XMonad.Layout.$fReadChoose2
                       @ XMonad.Layout.Tall
                       @ (XMonad.Layout.Choose
                            (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                       @ GHC.Word.Word64
                       Main.$s$fReadChoose3
                       (XMonad.Layout.$fReadTall @ GHC.Word.Word64)
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <XMonad.Layout.Choose
                            XMonad.Layout.Tall
                            (XMonad.Layout.Choose
                               (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                            GHC.Word.Word64>_R)
                      @ (XMonad.Layout.Choose
                           XMonad.Layout.Tall
                           (XMonad.Layout.Choose
                              (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                           GHC.Word.Word64)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (XMonad.Layout.Choose
                              XMonad.Layout.Tall
                              (XMonad.Layout.Choose
                                 (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                              GHC.Word.Word64)))) -}
3bd6bfa8c0e2daf12271da985c3ad58e
  $s$fReadChoose_$s$fReadMirror ::
    GHC.Read.Read
      (XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)
                  Main.$s$fReadChoose_$s$fReadMirror_$creadsPrec
                  Main.$s$fReadChoose_$s$fReadMirror_$creadList
                  (XMonad.Layout.$fReadMirror_$creadPrec
                     @ XMonad.Layout.Tall
                     @ GHC.Word.Word64
                     (XMonad.Layout.$fReadTall @ GHC.Word.Word64))
                  (XMonad.Layout.$fReadMirror_$creadListPrec
                     @ XMonad.Layout.Tall
                     @ GHC.Word.Word64
                     (XMonad.Layout.$fReadTall @ GHC.Word.Word64)) -}
541f8ddd57ab2428b07bc387bb0bf248
  $s$fReadChoose_$s$fReadMirror_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64]
                   (GHC.Read.list1
                      @ (XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)
                      (XMonad.Layout.$fReadMirror2
                         @ XMonad.Layout.Tall
                         @ GHC.Word.Word64
                         (XMonad.Layout.$fReadTall @ GHC.Word.Word64))
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                <XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64>_R))
                      GHC.Read.$fRead()5
                      @ [XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64]))) -}
4ca4768e70f2a748006fe270ba4c6517
  $s$fReadChoose_$s$fReadMirror_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)
                   ((XMonad.Layout.$fReadMirror2
                       @ XMonad.Layout.Tall
                       @ GHC.Word.Word64
                       (XMonad.Layout.$fReadTall @ GHC.Word.Word64)
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64>_R)
                      @ (XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (XMonad.Layout.Mirror XMonad.Layout.Tall GHC.Word.Word64)))) -}
de4545b719b47dfe7bfb605adc9adcb6
  $s$fReadModifiedLayout ::
    GHC.Read.Read
      (XMonad.Layout.LayoutModifier.ModifiedLayout
         XMonad.Hooks.ManageDocks.AvoidStruts
         (XMonad.Layout.Choose
            XMonad.Layout.Tall
            (XMonad.Layout.Choose
               (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
         GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (XMonad.Layout.LayoutModifier.ModifiedLayout
                       XMonad.Hooks.ManageDocks.AvoidStruts
                       (XMonad.Layout.Choose
                          XMonad.Layout.Tall
                          (XMonad.Layout.Choose
                             (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                       GHC.Word.Word64)
                  Main.$s$fReadModifiedLayout_$s$fReadModifiedLayout_$creadsPrec
                  Main.$s$fReadModifiedLayout_$s$fReadModifiedLayout_$creadList
                  (XMonad.Layout.LayoutModifier.$fReadModifiedLayout_$creadPrec
                     @ XMonad.Hooks.ManageDocks.AvoidStruts
                     @ (XMonad.Layout.Choose
                          XMonad.Layout.Tall
                          (XMonad.Layout.Choose
                             (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                     @ GHC.Word.Word64
                     Main.$s$fReadModifiedLayout1
                     (XMonad.Hooks.ManageDocks.$fReadAvoidStruts @ GHC.Word.Word64))
                  (XMonad.Layout.LayoutModifier.$fReadModifiedLayout_$creadListPrec
                     @ XMonad.Hooks.ManageDocks.AvoidStruts
                     @ (XMonad.Layout.Choose
                          XMonad.Layout.Tall
                          (XMonad.Layout.Choose
                             (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                     @ GHC.Word.Word64
                     Main.$s$fReadModifiedLayout1
                     (XMonad.Hooks.ManageDocks.$fReadAvoidStruts @ GHC.Word.Word64)) -}
ba6d8933ba89a7c1aa5c5dd8fe0f5e82
  $s$fReadModifiedLayout1 ::
    GHC.Read.Read
      (XMonad.Layout.Choose
         XMonad.Layout.Tall
         (XMonad.Layout.Choose
            (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
         GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fReadChoose2 -}
435697503263dac870fbb8900991e7cd
  $s$fReadModifiedLayout_$s$fReadModifiedLayout_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [XMonad.Layout.LayoutModifier.ModifiedLayout
         XMonad.Hooks.ManageDocks.AvoidStruts
         (XMonad.Layout.Choose
            XMonad.Layout.Tall
            (XMonad.Layout.Choose
               (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
         GHC.Word.Word64]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XMonad.Layout.LayoutModifier.ModifiedLayout
                        XMonad.Hooks.ManageDocks.AvoidStruts
                        (XMonad.Layout.Choose
                           XMonad.Layout.Tall
                           (XMonad.Layout.Choose
                              (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                        GHC.Word.Word64]
                   (GHC.Read.list1
                      @ (XMonad.Layout.LayoutModifier.ModifiedLayout
                           XMonad.Hooks.ManageDocks.AvoidStruts
                           (XMonad.Layout.Choose
                              XMonad.Layout.Tall
                              (XMonad.Layout.Choose
                                 (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                           GHC.Word.Word64)
                      (XMonad.Layout.LayoutModifier.$fReadModifiedLayout2
                         @ XMonad.Hooks.ManageDocks.AvoidStruts
                         @ (XMonad.Layout.Choose
                              XMonad.Layout.Tall
                              (XMonad.Layout.Choose
                                 (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                         @ GHC.Word.Word64
                         Main.$s$fReadModifiedLayout1
                         (XMonad.Hooks.ManageDocks.$fReadAvoidStruts @ GHC.Word.Word64))
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                <XMonad.Layout.LayoutModifier.ModifiedLayout
                                   XMonad.Hooks.ManageDocks.AvoidStruts
                                   (XMonad.Layout.Choose
                                      XMonad.Layout.Tall
                                      (XMonad.Layout.Choose
                                         (XMonad.Layout.Mirror XMonad.Layout.Tall)
                                         XMonad.Layout.Full))
                                   GHC.Word.Word64>_R))
                      GHC.Read.$fRead()5
                      @ [XMonad.Layout.LayoutModifier.ModifiedLayout
                           XMonad.Hooks.ManageDocks.AvoidStruts
                           (XMonad.Layout.Choose
                              XMonad.Layout.Tall
                              (XMonad.Layout.Choose
                                 (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                           GHC.Word.Word64]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [XMonad.Layout.LayoutModifier.ModifiedLayout
                              XMonad.Hooks.ManageDocks.AvoidStruts
                              (XMonad.Layout.Choose
                                 XMonad.Layout.Tall
                                 (XMonad.Layout.Choose
                                    (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                              GHC.Word.Word64]))) -}
63da7e00c6d28faac5bb4f7f57cf86d6
  $s$fReadModifiedLayout_$s$fReadModifiedLayout_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (XMonad.Layout.LayoutModifier.ModifiedLayout
            XMonad.Hooks.ManageDocks.AvoidStruts
            (XMonad.Layout.Choose
               XMonad.Layout.Tall
               (XMonad.Layout.Choose
                  (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
            GHC.Word.Word64)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (XMonad.Layout.LayoutModifier.ModifiedLayout
                        XMonad.Hooks.ManageDocks.AvoidStruts
                        (XMonad.Layout.Choose
                           XMonad.Layout.Tall
                           (XMonad.Layout.Choose
                              (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                        GHC.Word.Word64)
                   ((XMonad.Layout.LayoutModifier.$fReadModifiedLayout2
                       @ XMonad.Hooks.ManageDocks.AvoidStruts
                       @ (XMonad.Layout.Choose
                            XMonad.Layout.Tall
                            (XMonad.Layout.Choose
                               (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                       @ GHC.Word.Word64
                       Main.$s$fReadModifiedLayout1
                       (XMonad.Hooks.ManageDocks.$fReadAvoidStruts @ GHC.Word.Word64)
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <XMonad.Layout.LayoutModifier.ModifiedLayout
                            XMonad.Hooks.ManageDocks.AvoidStruts
                            (XMonad.Layout.Choose
                               XMonad.Layout.Tall
                               (XMonad.Layout.Choose
                                  (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                            GHC.Word.Word64>_R)
                      @ (XMonad.Layout.LayoutModifier.ModifiedLayout
                           XMonad.Hooks.ManageDocks.AvoidStruts
                           (XMonad.Layout.Choose
                              XMonad.Layout.Tall
                              (XMonad.Layout.Choose
                                 (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                           GHC.Word.Word64)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (XMonad.Layout.LayoutModifier.ModifiedLayout
                              XMonad.Hooks.ManageDocks.AvoidStruts
                              (XMonad.Layout.Choose
                                 XMonad.Layout.Tall
                                 (XMonad.Layout.Choose
                                    (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                              GHC.Word.Word64)))) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
f281d42c634f43ee3310cf36d70fdd14
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
7e6def0bc70a357007f542f99ebf7a77
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (XMonad.Util.Run.spawnPipe
                         @ GHC.Types.IO
                         Control.Monad.IO.Class.$fMonadIOIO
                         Main.main77)
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Handle.Types.Handle>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 XMonad.Main.xmonad1
                   @ (XMonad.Layout.LayoutModifier.ModifiedLayout
                        XMonad.Hooks.ManageDocks.AvoidStruts
                        (XMonad.Layout.Choose
                           XMonad.Layout.Tall
                           (XMonad.Layout.Choose
                              (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)))
                   Main.$s$fLayoutClassModifiedLayouta
                   Main.$s$fReadModifiedLayout
                   (case XMonad.Config.normalBorderColor of dt { DEFAULT ->
                    case XMonad.Config.focusedBorderColor of dt1 { DEFAULT ->
                    case XMonad.Config.terminal of dt2 { DEFAULT ->
                    case XMonad.Config.workspaces of dt3 { DEFAULT ->
                    let {
                      m1 :: XMonad.Core.X GHC.Base.String
                      = XMonad.Hooks.DynamicLog.dynamicLogString
                          (XMonad.Hooks.DynamicLog.PP
                             XMonad.Hooks.DynamicLog.xmobarPP7
                             XMonad.Hooks.DynamicLog.xmobarPP5
                             (GHC.Base.id @ GHC.Base.String)
                             XMonad.Hooks.DynamicLog.defaultPP6
                             XMonad.Hooks.DynamicLog.xmobarPP4
                             XMonad.Hooks.DynamicLog.defaultPP5
                             XMonad.Hooks.DynamicLog.defaultPP4
                             Main.main74
                             XMonad.Hooks.DynamicLog.defaultPP1
                             (GHC.Base.id @ GHC.Base.String)
                             (GHC.Base.id @ [GHC.Base.String])
                             XMonad.Util.WorkspaceCompare.getSortByIndex1
                               `cast`
                             (Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(XMonad.Util.WorkspaceCompare.WorkspaceSort,
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <XMonad.Util.WorkspaceCompare.WorkspaceSort>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <XMonad.Util.WorkspaceCompare.WorkspaceSort>_N))
                                       (Sym (XMonad.Core.N:X[0]) <XMonad.Util.WorkspaceCompare.WorkspaceSort>_N)))
                             (GHC.Types.[] @ (XMonad.Core.X (GHC.Base.Maybe GHC.Base.String)))
                             (GHC.IO.Handle.Text.hPutStrLn1 ipv1)
                               `cast`
                             (<GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)))
                    } in
                    XMonad.Core.XConfig
                      @ (XMonad.Layout.LayoutModifier.ModifiedLayout
                           XMonad.Hooks.ManageDocks.AvoidStruts
                           (XMonad.Layout.Choose
                              XMonad.Layout.Tall
                              (XMonad.Layout.Choose
                                 (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)))
                      dt
                      dt1
                      Main.main45
                      Main.main71
                      Main.main64
                        `cast`
                      (Trans
                           (<Graphics.X11.Types.Window>_R
                            ->_R Trans
                                     (<XMonad.Core.XConf>_R
                                      ->_R Trans
                                               (<XMonad.Core.XState>_R
                                                ->_R Sym (GHC.Types.N:IO[0]
                                                              <(Data.Monoid.Endo
                                                                  XMonad.Core.WindowSet,
                                                                XMonad.Core.XState)>_R))
                                               (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                         <XMonad.Core.XState>_N
                                                         <GHC.Types.IO>_R
                                                         <Data.Monoid.Endo
                                                            XMonad.Core.WindowSet>_N)))
                                     (Trans
                                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                    <*>_N
                                                    <XMonad.Core.XConf>_R
                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                       XMonad.Core.XState GHC.Types.IO>_R
                                                    <Data.Monoid.Endo XMonad.Core.WindowSet>_N))
                                          (Sym (XMonad.Core.N:X[0]) <Data.Monoid.Endo
                                                                       XMonad.Core.WindowSet>_N)))
                           (Trans
                                (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                          <*>_N
                                          <Graphics.X11.Types.Window>_R
                                          <XMonad.Core.X>_R
                                          <Data.Monoid.Endo XMonad.Core.WindowSet>_N))
                                (Sym (XMonad.Core.N:Query[0]) <Data.Monoid.Endo
                                                                 XMonad.Core.WindowSet>_N)))
                      Main.main63
                        `cast`
                      (<Graphics.X11.Xlib.Extras.Event>_R
                       ->_R Trans
                                (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                          <*>_N
                                          <XMonad.Core.XConf>_R
                                          <Control.Monad.Trans.State.Lazy.StateT
                                             XMonad.Core.XState GHC.Types.IO>_R
                                          <Data.Monoid.All>_N))
                                (Sym (XMonad.Core.N:X[0]) <Data.Monoid.All>_N))
                      Main.main47
                      64##
                      Main.main13
                      XMonad.Config.mouseBindings
                      1##
                      (\ (r1 :: XMonad.Core.XConf) ->
                       let {
                         m2 :: Control.Monad.Trans.State.Lazy.StateT
                                 XMonad.Core.XState GHC.Types.IO GHC.Base.String
                         = m1
                             `cast`
                           (Trans
                                (XMonad.Core.N:X[0] <GHC.Base.String>_N)
                                (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <XMonad.Core.XConf>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        XMonad.Core.XState GHC.Types.IO>_R
                                     <GHC.Base.String>_N))
                             r1
                       } in
                       (\ (s1 :: XMonad.Core.XState)
                          (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        case (m2
                                `cast`
                              (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                   <XMonad.Core.XState>_N <GHC.Types.IO>_R <GHC.Base.String>_N)
                                s1)
                               `cast`
                             (GHC.Types.N:IO[0] <(GHC.Base.String, XMonad.Core.XState)>_R)
                               s2 of ds2 { (#,#) ipv2 ipv3 ->
                        case GHC.IO.Handle.Text.hPutStr2
                               ipv1
                               (case ipv3 of wild1 { (,) a1 s' -> a1 })
                               GHC.Types.True
                               ipv2 of ds15 { (#,#) ipv4 ipv5 ->
                        (# ipv4, (ipv5, case ipv3 of wild1 { (,) a1 s' -> s' }) #) } })
                         `cast`
                       (Trans
                            (<XMonad.Core.XState>_R
                             ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N))))
                        `cast`
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <XMonad.Core.XConf>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        XMonad.Core.XState GHC.Types.IO>_R
                                     <()>_N))
                           (Sym (XMonad.Core.N:X[0]) <()>_N))
                      Main.main2
                        `cast`
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <XMonad.Core.XConf>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        XMonad.Core.XState GHC.Types.IO>_R
                                     <()>_N))
                           (Sym (XMonad.Core.N:X[0]) <()>_N))
                      GHC.Types.True
                      GHC.Types.True
                      4325392##
                      1703988##
                      XMonad.Config.$fDefaultXConfig1
                        `cast`
                      (<[GHC.Base.String]>_R
                       ->_R <XMonad.Core.XConfig XMonad.Core.Layout>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <XMonad.Core.XConfig XMonad.Core.Layout>_R)) } } } })
                   ipv }) -}
fff6d7ae8601cc3935adb2670e0cde3b
  main10 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Monoid.Endo
             (XMonad.StackSet.StackSet
                XMonad.Core.WorkspaceId
                (XMonad.Core.Layout Graphics.X11.Types.Window)
                Graphics.X11.Types.Window
                XMonad.Core.ScreenId
                XMonad.Core.ScreenDetail),
           XMonad.Core.XState) #)
  {- Arity: 4,
     Unfolding: (\ (w1 :: Graphics.X11.Types.Window)
                   (w2 :: XMonad.Core.XConf)
                   (w3 :: XMonad.Core.XState)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 XMonad.ManageHook.$wdoShift Main.main_ws1 w1 w3 w4) -}
0a70a91780e07742fcf48f66f039d44c
  main11 :: XMonad.Core.X ()
  {- Unfolding: (XMonad.Actions.SpawnOn.spawnAndDo
                   Main.main5
                     `cast`
                   (Trans
                        (<Graphics.X11.Types.Window>_R
                         ->_R Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(Data.Monoid.Endo
                                                               (XMonad.StackSet.StackSet
                                                                  XMonad.Core.WorkspaceId
                                                                  (XMonad.Core.Layout
                                                                     Graphics.X11.Types.Window)
                                                                  Graphics.X11.Types.Window
                                                                  XMonad.Core.ScreenId
                                                                  XMonad.Core.ScreenDetail),
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <Data.Monoid.Endo
                                                         (XMonad.StackSet.StackSet
                                                            XMonad.Core.WorkspaceId
                                                            (XMonad.Core.Layout
                                                               Graphics.X11.Types.Window)
                                                            Graphics.X11.Types.Window
                                                            XMonad.Core.ScreenId
                                                            XMonad.Core.ScreenDetail)>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <Data.Monoid.Endo
                                                    (XMonad.StackSet.StackSet
                                                       XMonad.Core.WorkspaceId
                                                       (XMonad.Core.Layout
                                                          Graphics.X11.Types.Window)
                                                       Graphics.X11.Types.Window
                                                       XMonad.Core.ScreenId
                                                       XMonad.Core.ScreenDetail)>_N))
                                       (Sym (XMonad.Core.N:X[0]) <Data.Monoid.Endo
                                                                    (XMonad.StackSet.StackSet
                                                                       XMonad.Core.WorkspaceId
                                                                       (XMonad.Core.Layout
                                                                          Graphics.X11.Types.Window)
                                                                       Graphics.X11.Types.Window
                                                                       XMonad.Core.ScreenId
                                                                       XMonad.Core.ScreenDetail)>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Graphics.X11.Types.Window>_R
                                       <XMonad.Core.X>_R
                                       <Data.Monoid.Endo
                                          (XMonad.StackSet.StackSet
                                             XMonad.Core.WorkspaceId
                                             (XMonad.Core.Layout Graphics.X11.Types.Window)
                                             Graphics.X11.Types.Window
                                             XMonad.Core.ScreenId
                                             XMonad.Core.ScreenDetail)>_N))
                             (Sym (XMonad.Core.N:Query[0]) <Data.Monoid.Endo
                                                              (XMonad.StackSet.StackSet
                                                                 XMonad.Core.WorkspaceId
                                                                 (XMonad.Core.Layout
                                                                    Graphics.X11.Types.Window)
                                                                 Graphics.X11.Types.Window
                                                                 XMonad.Core.ScreenId
                                                                 XMonad.Core.ScreenDetail)>_N)))
                   Main.main12) -}
04f404e7d07c68ca1640e5edb1e18375
  main12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "gnome-terminal"#) -}
8bfc4ccf77530039169e454ec6f70aa7
  main13 ::
    XMonad.Core.XConfig XMonad.Core.Layout
    -> Data.Map.Base.Map
         (Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym)
         (XMonad.Core.X ())
  {- Arity: 1,
     Unfolding: (\ (cnf :: XMonad.Core.XConfig XMonad.Core.Layout) ->
                 case Main.main_lvl528 of wild {
                   Data.Map.Base.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case cnf of ww { XMonad.Core.XConfig ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ->
                      case XMonad.Config.$wkeys ww3 ww4 ww7 ww8 of wild1 {
                        Data.Map.Base.Bin ipv5 ipv6 ipv7 ipv8 ipv9
                        -> Data.Map.Base.union_$shedgeUnion
                             @ (XMonad.Core.X ())
                             @ (Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym)
                             ipv5
                             ipv6
                             ipv7
                             ipv8
                             ipv9
                             ipv
                             ipv1
                             ipv2
                             ipv3
                             ipv4
                             (Data.Map.Base.NothingS
                                @ (Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym))
                             (Data.Map.Base.NothingS
                                @ (Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym))
                             XMonad.Util.EZConfig.$s$fOrd(,)1
                        Data.Map.Base.Tip -> wild } }
                   Data.Map.Base.Tip -> XMonad.Config.keys cnf }) -}
191ce175c95525e30b18c6a240c4e35a
  main14 ::
    [((Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym),
      XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ ((Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym),
                      XMonad.Core.X ())
                   Main.main43
                   Main.main15) -}
606d939f906cd1a379e5ef947ab25601
  main15 ::
    [((Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym),
      XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ ((Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym),
                      XMonad.Core.X ())
                   Main.main35
                   Main.main16) -}
4f23805b8869750104cce230d25792f4
  main16 ::
    [((Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym),
      XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ ((Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym),
                      XMonad.Core.X ())
                   Main.main26
                   Main.main17) -}
54740d0c1c13a609ab83886abedbeca3
  main17 ::
    [((Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym),
      XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ ((Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym),
                      XMonad.Core.X ())
                   Main.main18
                   (GHC.Types.[]
                      @ ((Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym),
                         XMonad.Core.X ()))) -}
6e0c5d9e9683f4d5db25aa936c105092
  main18 ::
    ((Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym),
     XMonad.Core.X ())
  {- Unfolding: ((Main.main24,
                  Main.main19
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
645f420ebb243c2991cee94b7bc22822
  main19 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                   = Main.main20
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <System.Posix.Types.ProcessID>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <System.Posix.Types.ProcessID>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (# ipv, (GHC.Tuple.(), case ipv1 of wild { (,) a1 s' -> s' }) #) })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
310572c2b9f3b01e04b6e5d70bc4b88f
  main2 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO ()
                   = Main.main11
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <()>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <()>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case ((Main.main8
                           `cast`
                         (Trans
                              (XMonad.Core.N:X[0] <()>_N)
                              (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <XMonad.Core.XConf>_R
                                   <Control.Monad.Trans.State.Lazy.StateT
                                      XMonad.Core.XState GHC.Types.IO>_R
                                   <()>_N))
                           r1)
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                          (case ipv1 of wild { (,) a1 s' -> s' }))
                         `cast`
                       (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                         ipv of ds2 { (#,#) ipv2 ipv3 ->
                  case ((Main.main6
                           `cast`
                         (Trans
                              (XMonad.Core.N:X[0] <()>_N)
                              (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <XMonad.Core.XConf>_R
                                   <Control.Monad.Trans.State.Lazy.StateT
                                      XMonad.Core.XState GHC.Types.IO>_R
                                   <()>_N))
                           r1)
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                          (case ipv3 of wild { (,) a1 s' -> s' }))
                         `cast`
                       (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                         ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                  ((Main.main3
                      `cast`
                    (Trans
                         (XMonad.Core.N:X[0] <()>_N)
                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                              <*>_N
                              <XMonad.Core.XConf>_R
                              <Control.Monad.Trans.State.Lazy.StateT
                                 XMonad.Core.XState GHC.Types.IO>_R
                              <()>_N))
                      r1)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                     (case ipv5 of wild { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                    ipv4 } } })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
4ac3a7727c70501db746201a4630c53d
  main20 :: XMonad.Core.X System.Posix.Types.ProcessID
  {- Unfolding: (XMonad.Core.xfork
                   @ XMonad.Core.X
                   XMonad.Core.$fMonadIOX
                   Main.main21 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
18caa796fd46e96a7394dba87af04a59
  main21 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (System.Posix.Process.executeFile1
                   @ ()
                   XMonad.Core.spawnPID2
                   GHC.Types.False
                   Main.main22
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])) -}
7aab047a1f0cc1fb90472657778f3d4d
  main22 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.Core.spawnPID1
                   Main.main23) -}
72d0f0f905d65b2e45984e4c3a3e6111
  main23 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.main12
                   (GHC.Types.[] @ GHC.Base.String)) -}
710daa2ebcbb6f54c9317199f9577272
  main24 :: (Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym)
  {- HasNoCafRefs,
     Unfolding: ((Main.main25 `cast` (Sym (Foreign.C.Types.N:CUInt[0])),
                  Graphics.X11.Types.xK_Return)) -}
2eb2a9cce70f1de67759821210ecd958
  main25 :: GHC.Word.Word32
  {- HasNoCafRefs, Unfolding: (GHC.Word.W32# 65##) -}
b852323530a4713c0ca25f658edaa82a
  main26 ::
    ((Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym),
     XMonad.Core.X ())
  {- Unfolding: ((Main.main33,
                  Main.main27
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
b9edf97aa37c28c32210693edc590e6a
  main27 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                   = Main.main28
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <System.Posix.Types.ProcessID>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <System.Posix.Types.ProcessID>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (# ipv, (GHC.Tuple.(), case ipv1 of wild { (,) a1 s' -> s' }) #) })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
26e2b7ebf4906de5671ce2301cb6e908
  main28 :: XMonad.Core.X System.Posix.Types.ProcessID
  {- Unfolding: (XMonad.Core.xfork
                   @ XMonad.Core.X
                   XMonad.Core.$fMonadIOX
                   Main.main29 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
304714624980c31d4155a8f9aec9d7ba
  main29 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (System.Posix.Process.executeFile1
                   @ ()
                   XMonad.Core.spawnPID2
                   GHC.Types.False
                   Main.main30
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])) -}
da815df873922fe84890faa2395f954c
  main3 :: XMonad.Core.X ()
  {- Unfolding: (XMonad.Actions.SpawnOn.spawnAndDo
                   Main.main5
                     `cast`
                   (Trans
                        (<Graphics.X11.Types.Window>_R
                         ->_R Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(Data.Monoid.Endo
                                                               (XMonad.StackSet.StackSet
                                                                  XMonad.Core.WorkspaceId
                                                                  (XMonad.Core.Layout
                                                                     Graphics.X11.Types.Window)
                                                                  Graphics.X11.Types.Window
                                                                  XMonad.Core.ScreenId
                                                                  XMonad.Core.ScreenDetail),
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <Data.Monoid.Endo
                                                         (XMonad.StackSet.StackSet
                                                            XMonad.Core.WorkspaceId
                                                            (XMonad.Core.Layout
                                                               Graphics.X11.Types.Window)
                                                            Graphics.X11.Types.Window
                                                            XMonad.Core.ScreenId
                                                            XMonad.Core.ScreenDetail)>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <Data.Monoid.Endo
                                                    (XMonad.StackSet.StackSet
                                                       XMonad.Core.WorkspaceId
                                                       (XMonad.Core.Layout
                                                          Graphics.X11.Types.Window)
                                                       Graphics.X11.Types.Window
                                                       XMonad.Core.ScreenId
                                                       XMonad.Core.ScreenDetail)>_N))
                                       (Sym (XMonad.Core.N:X[0]) <Data.Monoid.Endo
                                                                    (XMonad.StackSet.StackSet
                                                                       XMonad.Core.WorkspaceId
                                                                       (XMonad.Core.Layout
                                                                          Graphics.X11.Types.Window)
                                                                       Graphics.X11.Types.Window
                                                                       XMonad.Core.ScreenId
                                                                       XMonad.Core.ScreenDetail)>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Graphics.X11.Types.Window>_R
                                       <XMonad.Core.X>_R
                                       <Data.Monoid.Endo
                                          (XMonad.StackSet.StackSet
                                             XMonad.Core.WorkspaceId
                                             (XMonad.Core.Layout Graphics.X11.Types.Window)
                                             Graphics.X11.Types.Window
                                             XMonad.Core.ScreenId
                                             XMonad.Core.ScreenDetail)>_N))
                             (Sym (XMonad.Core.N:Query[0]) <Data.Monoid.Endo
                                                              (XMonad.StackSet.StackSet
                                                                 XMonad.Core.WorkspaceId
                                                                 (XMonad.Core.Layout
                                                                    Graphics.X11.Types.Window)
                                                                 Graphics.X11.Types.Window
                                                                 XMonad.Core.ScreenId
                                                                 XMonad.Core.ScreenDetail)>_N)))
                   Main.main4) -}
c207eab9609f34da3d2ad66830c4f8d5
  main30 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.Core.spawnPID1
                   Main.main31) -}
6bc1f8cde64fa9118c242b45ed9ea696
  main31 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.main32
                   (GHC.Types.[] @ GHC.Base.String)) -}
9785af5159e91a0183cce155bed9ca7c
  main32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "scrot"#) -}
a44bc17f07471cc7dac54ab3500d86b0
  main33 :: (Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym)
  {- HasNoCafRefs,
     Unfolding: ((Main.main34 `cast` (Sym (Foreign.C.Types.N:CUInt[0])),
                  Graphics.X11.Types.xK_Print)) -}
5bcd9e1da83794c5d9551f5f483551e1
  main34 :: GHC.Word.Word32
  {- HasNoCafRefs, Unfolding: (GHC.Word.W32# 0##) -}
d65e7e000639deb86e238d13c8e2f7e2
  main35 ::
    ((Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym),
     XMonad.Core.X ())
  {- Unfolding: ((Main.main42,
                  Main.main36
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
f0e5c5979b00040732d086d5607b10a8
  main36 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                   = Main.main37
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <System.Posix.Types.ProcessID>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <System.Posix.Types.ProcessID>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (# ipv, (GHC.Tuple.(), case ipv1 of wild { (,) a1 s' -> s' }) #) })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
83958a2bff45d76479a1a012e29e8e77
  main37 :: XMonad.Core.X System.Posix.Types.ProcessID
  {- Unfolding: (XMonad.Core.xfork
                   @ XMonad.Core.X
                   XMonad.Core.$fMonadIOX
                   Main.main38 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
5630152108dca0ab4b353a97967514fc
  main38 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (System.Posix.Process.executeFile1
                   @ ()
                   XMonad.Core.spawnPID2
                   GHC.Types.False
                   Main.main39
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])) -}
8d443adc4b857856c7db6910d30ebb7f
  main39 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.Core.spawnPID1
                   Main.main40) -}
ecf7020d7af6174cfd5096b61fb323a3
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "feh --bg-scale /usr/share/backgrounds/gnome/Terraform-green.jpg"#) -}
66c2dc95403ab4f7bade8fa7f5e60441
  main40 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.main41
                   (GHC.Types.[] @ GHC.Base.String)) -}
22254fca0dc6175236def6fadc540b3b
  main41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "sleep 0.2; scrot -s"#) -}
4230341945b45054f05914cef31c6c55
  main42 :: (Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym)
  {- HasNoCafRefs,
     Unfolding: ((Graphics.X11.Types.buttonPress
                    `cast`
                  (Sym (Foreign.C.Types.N:CUInt[0])),
                  Graphics.X11.Types.xK_Print)) -}
3c8a35cc3eab011642eebe8d6a6551a4
  main43 ::
    ((Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym),
     XMonad.Core.X ())
  {- Unfolding: ((Main.main46, Main.main44)) -}
d71b17049ee935547e6a4087029c4d87
  main44 :: XMonad.Core.X ()
  {- Unfolding: (XMonad.Util.Scratchpad.scratchpadSpawnActionTerminal
                   Main.main45) -}
c7799deb0818060729ed31339dbd8888
  main45 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "urxvt"#) -}
70f7162fc280bec60f566d6ec87f634a
  main46 :: (Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym)
  {- HasNoCafRefs,
     Unfolding: ((Graphics.X11.Types.mod4Mask1
                    `cast`
                  (Sym (Foreign.C.Types.N:CUInt[0])),
                  Graphics.X11.Types.xK_quoteleft)) -}
3393d0ec600f47af5cf8577c87bf4b01
  main47 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.main_ws
                   Main.main48) -}
b74c178d24e33e36413aeadcb3557632
  main48 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.main_ws1
                   Main.main49) -}
9e2e332bf0b4843d2c46c9fb9f235080
  main49 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.main62
                   Main.main50) -}
19e551fbac1be4dc2798e8b584658e22
  main5 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Monoid.Endo
             (XMonad.StackSet.StackSet
                XMonad.Core.WorkspaceId
                (XMonad.Core.Layout Graphics.X11.Types.Window)
                Graphics.X11.Types.Window
                XMonad.Core.ScreenId
                XMonad.Core.ScreenDetail),
           XMonad.Core.XState) #)
  {- Arity: 4,
     Unfolding: (\ (w1 :: Graphics.X11.Types.Window)
                   (w2 :: XMonad.Core.XConf)
                   (w3 :: XMonad.Core.XState)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 XMonad.ManageHook.$wdoShift Main.main_ws w1 w3 w4) -}
a64dfe07d55bcea0ea00f7c4685ea937
  main50 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.main61
                   Main.main51) -}
f6da7285e13efcb9b8e38fad23d6ef67
  main51 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.main60
                   Main.main52) -}
b15e07e02a394b8f2f496e42d17a7bf2
  main52 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.main59
                   Main.main53) -}
4a19d1208b496a06c7ecd9d604643b22
  main53 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.main58
                   Main.main54) -}
c7e8dbf85162c622d3728087bbe44e23
  main54 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.main57
                   Main.main55) -}
78f29e6ecbd3cc9e29607a306269116c
  main55 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.main56
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
981c11e1b90a63fb366e68d99f89bf80
  main56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NSP"#) -}
cc7a87017dace5031ac61609c52bed9e
  main57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "8"#) -}
2bdc42815e7dfcd2ec69a47c2534d4ec
  main58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "7"#) -}
36d2cf2194fe17371ae8f7d71a5108bf
  main59 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "6"#) -}
ef0bef727ef6784e812c82344028253c
  main6 :: XMonad.Core.X ()
  {- Unfolding: (XMonad.Actions.SpawnOn.spawnAndDo
                   Main.main5
                     `cast`
                   (Trans
                        (<Graphics.X11.Types.Window>_R
                         ->_R Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(Data.Monoid.Endo
                                                               (XMonad.StackSet.StackSet
                                                                  XMonad.Core.WorkspaceId
                                                                  (XMonad.Core.Layout
                                                                     Graphics.X11.Types.Window)
                                                                  Graphics.X11.Types.Window
                                                                  XMonad.Core.ScreenId
                                                                  XMonad.Core.ScreenDetail),
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <Data.Monoid.Endo
                                                         (XMonad.StackSet.StackSet
                                                            XMonad.Core.WorkspaceId
                                                            (XMonad.Core.Layout
                                                               Graphics.X11.Types.Window)
                                                            Graphics.X11.Types.Window
                                                            XMonad.Core.ScreenId
                                                            XMonad.Core.ScreenDetail)>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <Data.Monoid.Endo
                                                    (XMonad.StackSet.StackSet
                                                       XMonad.Core.WorkspaceId
                                                       (XMonad.Core.Layout
                                                          Graphics.X11.Types.Window)
                                                       Graphics.X11.Types.Window
                                                       XMonad.Core.ScreenId
                                                       XMonad.Core.ScreenDetail)>_N))
                                       (Sym (XMonad.Core.N:X[0]) <Data.Monoid.Endo
                                                                    (XMonad.StackSet.StackSet
                                                                       XMonad.Core.WorkspaceId
                                                                       (XMonad.Core.Layout
                                                                          Graphics.X11.Types.Window)
                                                                       Graphics.X11.Types.Window
                                                                       XMonad.Core.ScreenId
                                                                       XMonad.Core.ScreenDetail)>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Graphics.X11.Types.Window>_R
                                       <XMonad.Core.X>_R
                                       <Data.Monoid.Endo
                                          (XMonad.StackSet.StackSet
                                             XMonad.Core.WorkspaceId
                                             (XMonad.Core.Layout Graphics.X11.Types.Window)
                                             Graphics.X11.Types.Window
                                             XMonad.Core.ScreenId
                                             XMonad.Core.ScreenDetail)>_N))
                             (Sym (XMonad.Core.N:Query[0]) <Data.Monoid.Endo
                                                              (XMonad.StackSet.StackSet
                                                                 XMonad.Core.WorkspaceId
                                                                 (XMonad.Core.Layout
                                                                    Graphics.X11.Types.Window)
                                                                 Graphics.X11.Types.Window
                                                                 XMonad.Core.ScreenId
                                                                 XMonad.Core.ScreenDetail)>_N)))
                   Main.main7) -}
0b12ba7bb36095c8ff8abfe16ca56e8a
  main60 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "5"#) -}
3e88f28b98b3866172a43429baa82884
  main61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "4"#) -}
f4bab5ff2915e25c11a9f686a52a53ab
  main62 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Util"#) -}
a4bce47b7ec411190e15e23c1c4745f3
  main63 ::
    Graphics.X11.Xlib.Extras.Event
    -> XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO Data.Monoid.All
  {- Arity: 1,
     Unfolding: (\ (x :: Graphics.X11.Xlib.Extras.Event) ->
                 let {
                   eta1 :: XMonad.Core.X Data.Monoid.All
                   = XMonad.Hooks.ManageDocks.docksEventHook x
                 } in
                 \ (eta3 :: XMonad.Core.XConf) ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO Data.Monoid.All
                   = eta1
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <Data.Monoid.All>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <Data.Monoid.All>_N))
                       eta3
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m1
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N <GHC.Types.IO>_R <Data.Monoid.All>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <(Data.Monoid.All, XMonad.Core.XState)>_R)
                         s of ds4 { (#,#) ipv ipv1 ->
                  (# ipv,
                     (case ipv1 of wild { (,) a1 s' -> a1 },
                      case ipv1 of wild { (,) a1 s' -> s' }) #) })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(Data.Monoid.All, XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <Data.Monoid.All>_N)))) -}
9a6b3917734563914054c55a881f8ec1
  main64 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Monoid.Endo XMonad.Core.WindowSet, XMonad.Core.XState) #)
  {- Arity: 4,
     Unfolding: (\ (eta3 :: Graphics.X11.Types.Window)
                   (eta :: XMonad.Core.XConf)
                   (eta1 :: XMonad.Core.XState)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case XMonad.Hooks.ManageDocks.docks3
                        eta3
                        eta
                        eta1
                        eta2 of ds4 { (#,#) ipv ipv1 ->
                 case (((XMonad.Util.Scratchpad.scratchpadManageHook1
                           Main.main65
                           eta3)
                          `cast`
                        (Trans
                             (XMonad.Core.N:X[0] <Data.Monoid.Endo XMonad.Core.WindowSet>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <XMonad.Core.XConf>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     XMonad.Core.XState GHC.Types.IO>_R
                                  <Data.Monoid.Endo XMonad.Core.WindowSet>_N))
                          eta)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <XMonad.Core.XState>_N
                            <GHC.Types.IO>_R
                            <Data.Monoid.Endo XMonad.Core.WindowSet>_N)
                         (case ipv1 of wild { (,) a1 s' -> s' }))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(Data.Monoid.Endo XMonad.Core.WindowSet, XMonad.Core.XState)>_R)
                        ipv of ds5 { (#,#) ipv2 ipv3 ->
                 case (((XMonad.Core.$fMonoidQuery1
                           @ (Data.Monoid.Endo XMonad.Core.WindowSet)
                           (Data.Monoid.$fMonoidEndo
                              @ (XMonad.StackSet.StackSet
                                   XMonad.Core.WorkspaceId
                                   (XMonad.Core.Layout Graphics.X11.Types.Window)
                                   Graphics.X11.Types.Window
                                   XMonad.Core.ScreenId
                                   XMonad.Core.ScreenDetail))
                           XMonad.Config.$fDefaultXConfig10
                           eta3)
                          `cast`
                        (Trans
                             (XMonad.Core.N:X[0] <Data.Monoid.Endo XMonad.Core.WindowSet>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <XMonad.Core.XConf>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     XMonad.Core.XState GHC.Types.IO>_R
                                  <Data.Monoid.Endo XMonad.Core.WindowSet>_N))
                          eta)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <XMonad.Core.XState>_N
                            <GHC.Types.IO>_R
                            <Data.Monoid.Endo XMonad.Core.WindowSet>_N)
                         (case ipv3 of wild { (,) a1 s' -> s' }))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(Data.Monoid.Endo XMonad.Core.WindowSet, XMonad.Core.XState)>_R)
                        ipv2 of ds1 { (#,#) ipv4 ipv5 ->
                 (# ipv4,
                    ((\ (eta4 :: XMonad.StackSet.StackSet
                                   XMonad.Core.WorkspaceId
                                   (XMonad.Core.Layout Graphics.X11.Types.Window)
                                   Graphics.X11.Types.Window
                                   XMonad.Core.ScreenId
                                   XMonad.Core.ScreenDetail) ->
                      case ipv1 of wild { (,) a1 s' ->
                      a1
                        `cast`
                      (Data.Monoid.N:Endo[0]
                           <XMonad.StackSet.StackSet
                              XMonad.Core.WorkspaceId
                              (XMonad.Core.Layout Graphics.X11.Types.Window)
                              Graphics.X11.Types.Window
                              XMonad.Core.ScreenId
                              XMonad.Core.ScreenDetail>_R)
                        (case ipv3 of wild1 { (,) a2 s'1 ->
                         a2
                           `cast`
                         (Data.Monoid.N:Endo[0]
                              <XMonad.StackSet.StackSet
                                 XMonad.Core.WorkspaceId
                                 (XMonad.Core.Layout Graphics.X11.Types.Window)
                                 Graphics.X11.Types.Window
                                 XMonad.Core.ScreenId
                                 XMonad.Core.ScreenDetail>_R)
                           (case ipv5 of wild2 { (,) a3 s'2 ->
                            a3
                              `cast`
                            (Data.Monoid.N:Endo[0]
                                 <XMonad.StackSet.StackSet
                                    XMonad.Core.WorkspaceId
                                    (XMonad.Core.Layout Graphics.X11.Types.Window)
                                    Graphics.X11.Types.Window
                                    XMonad.Core.ScreenId
                                    XMonad.Core.ScreenDetail>_R)
                              eta4 }) }) })
                       `cast`
                     (Sym (Data.Monoid.N:Endo[0]
                               <XMonad.StackSet.StackSet
                                  XMonad.Core.WorkspaceId
                                  (XMonad.Core.Layout Graphics.X11.Types.Window)
                                  Graphics.X11.Types.Window
                                  XMonad.Core.ScreenId
                                  XMonad.Core.ScreenDetail>_R)),
                     case ipv5 of wild { (,) a1 s' -> s' }) #) } } }) -}
af19b2752fbc64c392d312dc2f57a949
  main65 :: XMonad.StackSet.RationalRect
  {- Strictness: m,
     Unfolding: (XMonad.StackSet.RationalRect
                   Main.main70
                   Main.main69
                   Main.main_w
                   Main.main66) -}
a400626607438d235e6da6df69a83d06
  main66 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Main.main68
                   Main.main67) -}
ea6d85111794b2e0a7222f28945e73d8
  main67 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10) -}
b56f3b8a15083e01870b57f516a9f05f
  main68 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
fb265fff6c4a5a9730bf1f5406efc90a
  main69 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Main.main_dt1
                   GHC.Real.$fEnumRatio1) -}
a569e5bb97c041f84f373fe40d31c6cc
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "stalonetray"#) -}
005763f00943517bd8bda1b57e9a6c61
  main70 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- Unfolding: (case GHC.Real.$w$s$c-
                        Main.main_dt
                        GHC.Real.$fEnumRatio1
                        Main.main_dt
                        GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 }) -}
1436741108ec3ea234787b2b97ded62e
  main71 ::
    XMonad.Layout.LayoutModifier.ModifiedLayout
      XMonad.Hooks.ManageDocks.AvoidStruts
      (XMonad.Layout.Choose
         XMonad.Layout.Tall
         (XMonad.Layout.Choose
            (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
      Graphics.X11.Types.Window
  {- Unfolding: (XMonad.Layout.LayoutModifier.ModifiedLayout
                   @ XMonad.Hooks.ManageDocks.AvoidStruts
                   @ (XMonad.Layout.Choose
                        XMonad.Layout.Tall
                        (XMonad.Layout.Choose
                           (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full))
                   @ Graphics.X11.Types.Window
                   Main.main72
                   XMonad.Config.$fDefaultXConfig16) -}
151d8b8c4fc26a7dc142c9d2c0d7e0ba
  main72 ::
    XMonad.Hooks.ManageDocks.AvoidStruts Graphics.X11.Types.Window
  {- Strictness: m,
     Unfolding: (XMonad.Hooks.ManageDocks.AvoidStruts
                   @ Graphics.X11.Types.Window
                   Main.main73) -}
125a168113d4b0f25d3206062f212153
  main73 :: Data.Set.Base.Set XMonad.Util.Types.Direction2D
  {- Unfolding: (XMonad.Hooks.ManageDocks.$sfromList
                   XMonad.Hooks.ManageDocks.avoidStruts1) -}
382f12669169a8cc7d451da2cbac3448
  main74 :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 Main.main75 (XMonad.Hooks.DynamicLog.$wshorten 50# x)) -}
ba292e7bd0a21e6d8615a235a6b35c96
  main75 :: GHC.Base.String -> GHC.Base.String
  {- Unfolding: (XMonad.Hooks.DynamicLog.xmobarColor
                   Main.main76
                   (GHC.Types.[] @ GHC.Types.Char)) -}
960add3051b9e0c032641c50909756c5
  main76 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "green"#) -}
aa7bb3654feea85b5c213416f10a8dfc
  main77 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "xmobar"#) -}
1a383f388a1e4882460dcf7a21fcfac5
  main78 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
957d88d2002931fc5d6dba993030b54d
  main8 :: XMonad.Core.X ()
  {- Unfolding: (XMonad.Actions.SpawnOn.spawnAndDo
                   Main.main10
                     `cast`
                   (Trans
                        (<Graphics.X11.Types.Window>_R
                         ->_R Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(Data.Monoid.Endo
                                                               (XMonad.StackSet.StackSet
                                                                  XMonad.Core.WorkspaceId
                                                                  (XMonad.Core.Layout
                                                                     Graphics.X11.Types.Window)
                                                                  Graphics.X11.Types.Window
                                                                  XMonad.Core.ScreenId
                                                                  XMonad.Core.ScreenDetail),
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <Data.Monoid.Endo
                                                         (XMonad.StackSet.StackSet
                                                            XMonad.Core.WorkspaceId
                                                            (XMonad.Core.Layout
                                                               Graphics.X11.Types.Window)
                                                            Graphics.X11.Types.Window
                                                            XMonad.Core.ScreenId
                                                            XMonad.Core.ScreenDetail)>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <Data.Monoid.Endo
                                                    (XMonad.StackSet.StackSet
                                                       XMonad.Core.WorkspaceId
                                                       (XMonad.Core.Layout
                                                          Graphics.X11.Types.Window)
                                                       Graphics.X11.Types.Window
                                                       XMonad.Core.ScreenId
                                                       XMonad.Core.ScreenDetail)>_N))
                                       (Sym (XMonad.Core.N:X[0]) <Data.Monoid.Endo
                                                                    (XMonad.StackSet.StackSet
                                                                       XMonad.Core.WorkspaceId
                                                                       (XMonad.Core.Layout
                                                                          Graphics.X11.Types.Window)
                                                                       Graphics.X11.Types.Window
                                                                       XMonad.Core.ScreenId
                                                                       XMonad.Core.ScreenDetail)>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Graphics.X11.Types.Window>_R
                                       <XMonad.Core.X>_R
                                       <Data.Monoid.Endo
                                          (XMonad.StackSet.StackSet
                                             XMonad.Core.WorkspaceId
                                             (XMonad.Core.Layout Graphics.X11.Types.Window)
                                             Graphics.X11.Types.Window
                                             XMonad.Core.ScreenId
                                             XMonad.Core.ScreenDetail)>_N))
                             (Sym (XMonad.Core.N:Query[0]) <Data.Monoid.Endo
                                                              (XMonad.StackSet.StackSet
                                                                 XMonad.Core.WorkspaceId
                                                                 (XMonad.Core.Layout
                                                                    Graphics.X11.Types.Window)
                                                                 Graphics.X11.Types.Window
                                                                 XMonad.Core.ScreenId
                                                                 XMonad.Core.ScreenDetail)>_N)))
                   Main.main9) -}
40e5db8d9119a97954d0ec50bfa8914d
  main9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "chromium"#) -}
f7aab65b9226651188fba9548383b612
  main_dt :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
c49afcae2aa8b5f9bf1bb1849d44b782
  main_dt1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
852fb6b60ff37a4e6cce479e1c9b709e
  main_lvl528 ::
    Data.Map.Base.Map
      (Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym)
      (XMonad.Core.X ())
  {- Unfolding: (XMonad.Config.$sfromList
                   @ (XMonad.Core.X ())
                   Main.main14) -}
3d31560bf6dc06169de96de4c12674a0
  main_w :: GHC.Real.Rational
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Main.main_dt
                   GHC.Real.$fEnumRatio1) -}
134bc4809282ec88717d06e6ad6f6ec5
  main_ws :: XMonad.Core.WorkspaceId
  {- Unfolding: (GHC.CString.unpackCString# "Term"#) -}
ce81f7a287fdb05eeaa4e376657e6060
  main_ws1 :: XMonad.Core.WorkspaceId
  {- Unfolding: (GHC.CString.unpackCString# "Web"#) -}
"SPEC/Main $fLayoutClassChoosea @ (Mirror Tall) @ Word64 @ Full" [ALWAYS] forall ($dLayoutClass1 :: XMonad.Core.LayoutClass
                                                                                                      XMonad.Layout.Full
                                                                                                      GHC.Word.Word64)
                                                                                 ($dLayoutClass :: XMonad.Core.LayoutClass
                                                                                                     (XMonad.Layout.Mirror
                                                                                                        XMonad.Layout.Tall)
                                                                                                     GHC.Word.Word64)
  XMonad.Layout.$fLayoutClassChoosea @ (XMonad.Layout.Mirror
                                          XMonad.Layout.Tall)
                                     @ GHC.Word.Word64
                                     @ XMonad.Layout.Full
                                     $dLayoutClass
                                     $dLayoutClass1
  = Main.$s$fLayoutClassChoosea
"SPEC/Main $fLayoutClassChoosea @ Tall @ Word64 @ (Choose
                                                    (Mirror Tall) Full)" [ALWAYS] forall ($dLayoutClass1 :: XMonad.Core.LayoutClass
                                                                                                                                                                        (XMonad.Layout.Choose
                                                                                                                                                                           (XMonad.Layout.Mirror
                                                                                                                                                                              XMonad.Layout.Tall)
                                                                                                                                                                           XMonad.Layout.Full)
                                                                                                                                                                        GHC.Word.Word64)
                                                                                                                                                   ($dLayoutClass :: XMonad.Core.LayoutClass
                                                                                                                                                                       XMonad.Layout.Tall
                                                                                                                                                                       GHC.Word.Word64)
  XMonad.Layout.$fLayoutClassChoosea @ XMonad.Layout.Tall
                                     @ GHC.Word.Word64
                                     @ (XMonad.Layout.Choose
                                          (XMonad.Layout.Mirror XMonad.Layout.Tall)
                                          XMonad.Layout.Full)
                                     $dLayoutClass
                                     $dLayoutClass1
  = Main.$s$fLayoutClassChoosea6
"SPEC/Main $fLayoutClassChoosea_$cdescription @ (Mirror
                                                  Tall) @ Word64 @ Full" [ALWAYS] forall ($dLayoutClass1 :: XMonad.Core.LayoutClass
                                                                                                                                                                      XMonad.Layout.Full
                                                                                                                                                                      GHC.Word.Word64)
                                                                                                                                                 ($dLayoutClass :: XMonad.Core.LayoutClass
                                                                                                                                                                     (XMonad.Layout.Mirror
                                                                                                                                                                        XMonad.Layout.Tall)
                                                                                                                                                                     GHC.Word.Word64)
  XMonad.Layout.$fLayoutClassChoosea_$cdescription @ (XMonad.Layout.Mirror
                                                        XMonad.Layout.Tall)
                                                   @ GHC.Word.Word64
                                                   @ XMonad.Layout.Full
                                                   $dLayoutClass
                                                   $dLayoutClass1
  = Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cdescription
"SPEC/Main $fLayoutClassChoosea_$cdescription @ Tall @ Word64 @ (Choose
                                                                  (Mirror Tall) Full)" [ALWAYS] forall ($dLayoutClass1 :: XMonad.Core.LayoutClass
                                                                                                                                                                                                    (XMonad.Layout.Choose
                                                                                                                                                                                                       (XMonad.Layout.Mirror
                                                                                                                                                                                                          XMonad.Layout.Tall)
                                                                                                                                                                                                       XMonad.Layout.Full)
                                                                                                                                                                                                    GHC.Word.Word64)
                                                                                                                                                                               ($dLayoutClass :: XMonad.Core.LayoutClass
                                                                                                                                                                                                   XMonad.Layout.Tall
                                                                                                                                                                                                   GHC.Word.Word64)
  XMonad.Layout.$fLayoutClassChoosea_$cdescription @ XMonad.Layout.Tall
                                                   @ GHC.Word.Word64
                                                   @ (XMonad.Layout.Choose
                                                        (XMonad.Layout.Mirror XMonad.Layout.Tall)
                                                        XMonad.Layout.Full)
                                                   $dLayoutClass
                                                   $dLayoutClass1
  = Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cdescription1
"SPEC/Main $fLayoutClassChoosea_$cp1LayoutClass @ (Mirror
                                                    Tall) @ Word64 @ Full" [ALWAYS] forall ($dLayoutClass1 :: XMonad.Core.LayoutClass
                                                                                                                                                                          XMonad.Layout.Full
                                                                                                                                                                          GHC.Word.Word64)
                                                                                                                                                     ($dLayoutClass :: XMonad.Core.LayoutClass
                                                                                                                                                                         (XMonad.Layout.Mirror
                                                                                                                                                                            XMonad.Layout.Tall)
                                                                                                                                                                         GHC.Word.Word64)
  XMonad.Layout.$fLayoutClassChoosea_$cp1LayoutClass @ (XMonad.Layout.Mirror
                                                          XMonad.Layout.Tall)
                                                     @ GHC.Word.Word64
                                                     @ XMonad.Layout.Full
                                                     $dLayoutClass
                                                     $dLayoutClass1
  = Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cp1LayoutClass
"SPEC/Main $fLayoutClassChoosea_$cp1LayoutClass @ Tall @ Word64 @ (Choose
                                                                    (Mirror Tall) Full)" [ALWAYS] forall ($dLayoutClass1 :: XMonad.Core.LayoutClass
                                                                                                                                                                                                        (XMonad.Layout.Choose
                                                                                                                                                                                                           (XMonad.Layout.Mirror
                                                                                                                                                                                                              XMonad.Layout.Tall)
                                                                                                                                                                                                           XMonad.Layout.Full)
                                                                                                                                                                                                        GHC.Word.Word64)
                                                                                                                                                                                   ($dLayoutClass :: XMonad.Core.LayoutClass
                                                                                                                                                                                                       XMonad.Layout.Tall
                                                                                                                                                                                                       GHC.Word.Word64)
  XMonad.Layout.$fLayoutClassChoosea_$cp1LayoutClass @ XMonad.Layout.Tall
                                                     @ GHC.Word.Word64
                                                     @ (XMonad.Layout.Choose
                                                          (XMonad.Layout.Mirror XMonad.Layout.Tall)
                                                          XMonad.Layout.Full)
                                                     $dLayoutClass
                                                     $dLayoutClass1
  = Main.$s$fLayoutClassChoosea_$s$fLayoutClassChoosea_$cp1LayoutClass1
"SPEC/Main $fLayoutClassMirrora @ Tall @ Word64" [ALWAYS] forall ($dLayoutClass :: XMonad.Core.LayoutClass
                                                                                     XMonad.Layout.Tall
                                                                                     GHC.Word.Word64)
  XMonad.Layout.$fLayoutClassMirrora @ XMonad.Layout.Tall
                                     @ GHC.Word.Word64
                                     $dLayoutClass
  = Main.$s$fLayoutClassChoosea_$s$fLayoutClassMirrora
"SPEC/Main $fLayoutClassMirrora_$cdescription @ Tall @ Word64" [ALWAYS] forall ($dLayoutClass :: XMonad.Core.LayoutClass
                                                                                                   XMonad.Layout.Tall
                                                                                                   GHC.Word.Word64)
  XMonad.Layout.$fLayoutClassMirrora_$cdescription @ XMonad.Layout.Tall
                                                   @ GHC.Word.Word64
                                                   $dLayoutClass
  = Main.$s$fLayoutClassChoosea_$s$fLayoutClassMirrora_$cdescription
"SPEC/Main $fLayoutClassMirrora_$cpureLayout @ Tall @ Word64" [ALWAYS] forall ($dLayoutClass :: XMonad.Core.LayoutClass
                                                                                                  XMonad.Layout.Tall
                                                                                                  GHC.Word.Word64)
  XMonad.Layout.$fLayoutClassMirrora_$cpureLayout @ XMonad.Layout.Tall
                                                  @ GHC.Word.Word64
                                                  $dLayoutClass
  = Main.$s$fLayoutClassChoosea_$s$fLayoutClassMirrora_$cpureLayout
"SPEC/Main $fLayoutClassMirrora_$cpureMessage @ Tall @ Word64" [ALWAYS] forall ($dLayoutClass :: XMonad.Core.LayoutClass
                                                                                                   XMonad.Layout.Tall
                                                                                                   GHC.Word.Word64)
  XMonad.Layout.$fLayoutClassMirrora_$cpureMessage @ XMonad.Layout.Tall
                                                   @ GHC.Word.Word64
                                                   $dLayoutClass
  = Main.$s$fLayoutClassChoosea_$s$fLayoutClassMirrora_$cpureMessage
"SPEC/Main $fLayoutClassModifiedLayouta @ AvoidStruts @ Word64 @ (Choose
                                                                   Tall (Choose (Mirror Tall) Full))" [ALWAYS] forall ($dLayoutClass :: XMonad.Core.LayoutClass
                                                                                                                                                                                                                   (XMonad.Layout.Choose
                                                                                                                                                                                                                      XMonad.Layout.Tall
                                                                                                                                                                                                                      (XMonad.Layout.Choose
                                                                                                                                                                                                                         (XMonad.Layout.Mirror
                                                                                                                                                                                                                            XMonad.Layout.Tall)
                                                                                                                                                                                                                         XMonad.Layout.Full))
                                                                                                                                                                                                                   GHC.Word.Word64)
                                                                                                                                                                                               ($dLayoutModifier :: XMonad.Layout.LayoutModifier.LayoutModifier
                                                                                                                                                                                                                      XMonad.Hooks.ManageDocks.AvoidStruts
                                                                                                                                                                                                                      GHC.Word.Word64)
  XMonad.Layout.LayoutModifier.$fLayoutClassModifiedLayouta @ XMonad.Hooks.ManageDocks.AvoidStruts
                                                            @ GHC.Word.Word64
                                                            @ (XMonad.Layout.Choose
                                                                 XMonad.Layout.Tall
                                                                 (XMonad.Layout.Choose
                                                                    (XMonad.Layout.Mirror
                                                                       XMonad.Layout.Tall)
                                                                    XMonad.Layout.Full))
                                                            $dLayoutModifier
                                                            $dLayoutClass
  = Main.$s$fLayoutClassModifiedLayouta
"SPEC/Main $fLayoutClassModifiedLayouta_$cp1LayoutClass @ AvoidStruts @ Word64 @ (Choose
                                                                                   Tall
                                                                                   (Choose
                                                                                      (Mirror Tall)
                                                                                      Full))" [ALWAYS] forall ($dLayoutClass :: XMonad.Core.LayoutClass
onad.Layout.Choose
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     XMonad.Layout.Tall
onad.Layout.Choose
onad.Layout.Mirror
onad.Layout.Tall)
onad.Layout.Full))
ord.Word64)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ($dLayoutModifier :: XMonad.Layout.LayoutModifier.LayoutModifier
onad.Hooks.ManageDocks.AvoidStruts
ord.Word64)
  XMonad.Layout.LayoutModifier.$fLayoutClassModifiedLayouta_$cp1LayoutClass @ XMonad.Hooks.ManageDocks.AvoidStruts
                                                                            @ GHC.Word.Word64
                                                                            @ (XMonad.Layout.Choose
                                                                                 XMonad.Layout.Tall
                                                                                 (XMonad.Layout.Choose
                                                                                    (XMonad.Layout.Mirror
                                                                                       XMonad.Layout.Tall)
                                                                                    XMonad.Layout.Full))
                                                                            $dLayoutModifier
                                                                            $dLayoutClass
  = Main.$s$fLayoutClassModifiedLayouta_$s$fLayoutClassModifiedLayouta_$cp1LayoutClass
"SPEC/Main $fReadChoose @ (Mirror Tall) @ Full @ Word64" [ALWAYS] forall ($dRead1 :: GHC.Read.Read
                                                                                       (XMonad.Layout.Mirror
                                                                                          XMonad.Layout.Tall
                                                                                          GHC.Word.Word64))
                                                                         ($dRead :: GHC.Read.Read
                                                                                      (XMonad.Layout.Full
                                                                                         GHC.Word.Word64))
  XMonad.Layout.$fReadChoose @ (XMonad.Layout.Mirror
                                  XMonad.Layout.Tall)
                             @ XMonad.Layout.Full
                             @ GHC.Word.Word64
                             $dRead
                             $dRead1
  = Main.$s$fReadChoose
"SPEC/Main $fReadChoose @ Tall @ (Choose
                                   (Mirror Tall) Full) @ Word64" [ALWAYS] forall ($dRead1 :: GHC.Read.Read
                                                                                                                                        (XMonad.Layout.Tall
                                                                                                                                           GHC.Word.Word64))
                                                                                                                          ($dRead :: GHC.Read.Read
                                                                                                                                       (XMonad.Layout.Choose
                                                                                                                                          (XMonad.Layout.Mirror
                                                                                                                                             XMonad.Layout.Tall)
                                                                                                                                          XMonad.Layout.Full
                                                                                                                                          GHC.Word.Word64))
  XMonad.Layout.$fReadChoose @ XMonad.Layout.Tall
                             @ (XMonad.Layout.Choose
                                  (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                             @ GHC.Word.Word64
                             $dRead
                             $dRead1
  = Main.$s$fReadChoose2
"SPEC/Main $fReadChoose_$creadList @ (Mirror Tall) @ Full @ Word64" [ALWAYS] forall ($dRead1 :: GHC.Read.Read
                                                                                                  (XMonad.Layout.Mirror
                                                                                                     XMonad.Layout.Tall
                                                                                                     GHC.Word.Word64))
                                                                                    ($dRead :: GHC.Read.Read
                                                                                                 (XMonad.Layout.Full
                                                                                                    GHC.Word.Word64))
  XMonad.Layout.$fReadChoose_$creadList @ (XMonad.Layout.Mirror
                                             XMonad.Layout.Tall)
                                        @ XMonad.Layout.Full
                                        @ GHC.Word.Word64
                                        $dRead
                                        $dRead1
  = Main.$s$fReadChoose_$s$fReadChoose_$creadList
"SPEC/Main $fReadChoose_$creadList @ Tall @ (Choose
                                              (Mirror Tall) Full) @ Word64" [ALWAYS] forall ($dRead1 :: GHC.Read.Read
                                                                                                                                                              (XMonad.Layout.Tall
                                                                                                                                                                 GHC.Word.Word64))
                                                                                                                                                ($dRead :: GHC.Read.Read
                                                                                                                                                             (XMonad.Layout.Choose
                                                                                                                                                                (XMonad.Layout.Mirror
                                                                                                                                                                   XMonad.Layout.Tall)
                                                                                                                                                                XMonad.Layout.Full
                                                                                                                                                                GHC.Word.Word64))
  XMonad.Layout.$fReadChoose_$creadList @ XMonad.Layout.Tall
                                        @ (XMonad.Layout.Choose
                                             (XMonad.Layout.Mirror XMonad.Layout.Tall)
                                             XMonad.Layout.Full)
                                        @ GHC.Word.Word64
                                        $dRead
                                        $dRead1
  = Main.$s$fReadChoose_$s$fReadChoose_$creadList1
"SPEC/Main $fReadChoose_$creadsPrec @ (Mirror Tall) @ Full @ Word64" [ALWAYS] forall ($dRead1 :: GHC.Read.Read
                                                                                                   (XMonad.Layout.Mirror
                                                                                                      XMonad.Layout.Tall
                                                                                                      GHC.Word.Word64))
                                                                                     ($dRead :: GHC.Read.Read
                                                                                                  (XMonad.Layout.Full
                                                                                                     GHC.Word.Word64))
  XMonad.Layout.$fReadChoose_$creadsPrec @ (XMonad.Layout.Mirror
                                              XMonad.Layout.Tall)
                                         @ XMonad.Layout.Full
                                         @ GHC.Word.Word64
                                         $dRead
                                         $dRead1
  = Main.$s$fReadChoose_$s$fReadChoose_$creadsPrec
"SPEC/Main $fReadChoose_$creadsPrec @ Tall @ (Choose
                                               (Mirror Tall) Full) @ Word64" [ALWAYS] forall ($dRead1 :: GHC.Read.Read
                                                                                                                                                                (XMonad.Layout.Tall
                                                                                                                                                                   GHC.Word.Word64))
                                                                                                                                                  ($dRead :: GHC.Read.Read
                                                                                                                                                               (XMonad.Layout.Choose
                                                                                                                                                                  (XMonad.Layout.Mirror
                                                                                                                                                                     XMonad.Layout.Tall)
                                                                                                                                                                  XMonad.Layout.Full
                                                                                                                                                                  GHC.Word.Word64))
  XMonad.Layout.$fReadChoose_$creadsPrec @ XMonad.Layout.Tall
                                         @ (XMonad.Layout.Choose
                                              (XMonad.Layout.Mirror XMonad.Layout.Tall)
                                              XMonad.Layout.Full)
                                         @ GHC.Word.Word64
                                         $dRead
                                         $dRead1
  = Main.$s$fReadChoose_$s$fReadChoose_$creadsPrec1
"SPEC/Main $fReadMirror @ Tall @ Word64" [ALWAYS] forall ($dRead :: GHC.Read.Read
                                                                      (XMonad.Layout.Tall
                                                                         GHC.Word.Word64))
  XMonad.Layout.$fReadMirror @ XMonad.Layout.Tall
                             @ GHC.Word.Word64
                             $dRead
  = Main.$s$fReadChoose_$s$fReadMirror
"SPEC/Main $fReadMirror_$creadList @ Tall @ Word64" [ALWAYS] forall ($dRead :: GHC.Read.Read
                                                                                 (XMonad.Layout.Tall
                                                                                    GHC.Word.Word64))
  XMonad.Layout.$fReadMirror_$creadList @ XMonad.Layout.Tall
                                        @ GHC.Word.Word64
                                        $dRead
  = Main.$s$fReadChoose_$s$fReadMirror_$creadList
"SPEC/Main $fReadMirror_$creadsPrec @ Tall @ Word64" [ALWAYS] forall ($dRead :: GHC.Read.Read
                                                                                  (XMonad.Layout.Tall
                                                                                     GHC.Word.Word64))
  XMonad.Layout.$fReadMirror_$creadsPrec @ XMonad.Layout.Tall
                                         @ GHC.Word.Word64
                                         $dRead
  = Main.$s$fReadChoose_$s$fReadMirror_$creadsPrec
"SPEC/Main $fReadModifiedLayout @ AvoidStruts @ (Choose
                                                  Tall (Choose (Mirror Tall) Full)) @ Word64" [ALWAYS] forall ($dRead1 :: GHC.Read.Read
                                                                                                                                                                                    (XMonad.Hooks.ManageDocks.AvoidStruts
                                                                                                                                                                                       GHC.Word.Word64))
                                                                                                                                                                      ($dRead :: GHC.Read.Read
                                                                                                                                                                                   (XMonad.Layout.Choose
                                                                                                                                                                                      XMonad.Layout.Tall
                                                                                                                                                                                      (XMonad.Layout.Choose
                                                                                                                                                                                         (XMonad.Layout.Mirror
                                                                                                                                                                                            XMonad.Layout.Tall)
                                                                                                                                                                                         XMonad.Layout.Full)
                                                                                                                                                                                      GHC.Word.Word64))
  XMonad.Layout.LayoutModifier.$fReadModifiedLayout @ XMonad.Hooks.ManageDocks.AvoidStruts
                                                    @ (XMonad.Layout.Choose
                                                         XMonad.Layout.Tall
                                                         (XMonad.Layout.Choose
                                                            (XMonad.Layout.Mirror
                                                               XMonad.Layout.Tall)
                                                            XMonad.Layout.Full))
                                                    @ GHC.Word.Word64
                                                    $dRead
                                                    $dRead1
  = Main.$s$fReadModifiedLayout
"SPEC/Main $fReadModifiedLayout_$creadList @ AvoidStruts @ (Choose
                                                             Tall
                                                             (Choose (Mirror Tall) Full)) @ Word64" [ALWAYS] forall ($dRead1 :: GHC.Read.Read
                                                                                                                                                                                                                                                                       (XMonad.Hooks.ManageDocks.AvoidStruts
                                                                                                                                                                                                                                                                          GHC.Word.Word64))
                                                                                                                                                                                                                                                         ($dRead :: GHC.Read.Read
                                                                                                                                                                                                                                                                      (XMonad.Layout.Choose
                                                                                                                                                                                                                                                                         XMonad.Layout.Tall
                                                                                                                                                                                                                                                                         (XMonad.Layout.Choose
                                                                                                                                                                                                                                                                            (XMonad.Layout.Mirror
                                                                                                                                                                                                                                                                               XMonad.Layout.Tall)
                                                                                                                                                                                                                                                                            XMonad.Layout.Full)
                                                                                                                                                                                                                                                                         GHC.Word.Word64))
  XMonad.Layout.LayoutModifier.$fReadModifiedLayout_$creadList @ XMonad.Hooks.ManageDocks.AvoidStruts
                                                               @ (XMonad.Layout.Choose
                                                                    XMonad.Layout.Tall
                                                                    (XMonad.Layout.Choose
                                                                       (XMonad.Layout.Mirror
                                                                          XMonad.Layout.Tall)
                                                                       XMonad.Layout.Full))
                                                               @ GHC.Word.Word64
                                                               $dRead
                                                               $dRead1
  = Main.$s$fReadModifiedLayout_$s$fReadModifiedLayout_$creadList
"SPEC/Main $fReadModifiedLayout_$creadsPrec @ AvoidStruts @ (Choose
                                                              Tall
                                                              (Choose (Mirror Tall) Full)) @ Word64" [ALWAYS] forall ($dRead1 :: GHC.Read.Read
                                                                                                                                                                                                                                                                          (XMonad.Hooks.ManageDocks.AvoidStruts
                                                                                                                                                                                                                                                                             GHC.Word.Word64))
                                                                                                                                                                                                                                                            ($dRead :: GHC.Read.Read
                                                                                                                                                                                                                                                                         (XMonad.Layout.Choose
                                                                                                                                                                                                                                                                            XMonad.Layout.Tall
                                                                                                                                                                                                                                                                            (XMonad.Layout.Choose
                                                                                                                                                                                                                                                                               (XMonad.Layout.Mirror
                                                                                                                                                                                                                                                                                  XMonad.Layout.Tall)
                                                                                                                                                                                                                                                                               XMonad.Layout.Full)
                                                                                                                                                                                                                                                                            GHC.Word.Word64))
  XMonad.Layout.LayoutModifier.$fReadModifiedLayout_$creadsPrec @ XMonad.Hooks.ManageDocks.AvoidStruts
                                                                @ (XMonad.Layout.Choose
                                                                     XMonad.Layout.Tall
                                                                     (XMonad.Layout.Choose
                                                                        (XMonad.Layout.Mirror
                                                                           XMonad.Layout.Tall)
                                                                        XMonad.Layout.Full))
                                                                @ GHC.Word.Word64
                                                                $dRead
                                                                $dRead1
  = Main.$s$fReadModifiedLayout_$s$fReadModifiedLayout_$creadsPrec
"SPEC/Main $fShowChoose @ (Mirror Tall) @ Full @ Word64" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                       (XMonad.Layout.Mirror
                                                                                          XMonad.Layout.Tall
                                                                                          GHC.Word.Word64))
                                                                         ($dShow :: GHC.Show.Show
                                                                                      (XMonad.Layout.Full
                                                                                         GHC.Word.Word64))
  XMonad.Layout.$fShowChoose @ (XMonad.Layout.Mirror
                                  XMonad.Layout.Tall)
                             @ XMonad.Layout.Full
                             @ GHC.Word.Word64
                             $dShow
                             $dShow1
  = Main.$s$fLayoutClassChoosea_$s$fShowChoose
"SPEC/Main $fShowChoose @ Tall @ (Choose
                                   (Mirror Tall) Full) @ Word64" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                        (XMonad.Layout.Tall
                                                                                                                                           GHC.Word.Word64))
                                                                                                                          ($dShow :: GHC.Show.Show
                                                                                                                                       (XMonad.Layout.Choose
                                                                                                                                          (XMonad.Layout.Mirror
                                                                                                                                             XMonad.Layout.Tall)
                                                                                                                                          XMonad.Layout.Full
                                                                                                                                          GHC.Word.Word64))
  XMonad.Layout.$fShowChoose @ XMonad.Layout.Tall
                             @ (XMonad.Layout.Choose
                                  (XMonad.Layout.Mirror XMonad.Layout.Tall) XMonad.Layout.Full)
                             @ GHC.Word.Word64
                             $dShow
                             $dShow1
  = Main.$s$fLayoutClassChoosea_$s$fShowChoose1
"SPEC/Main $fShowChoose_$cshow @ (Mirror Tall) @ Full @ Word64" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                              (XMonad.Layout.Mirror
                                                                                                 XMonad.Layout.Tall
                                                                                                 GHC.Word.Word64))
                                                                                ($dShow :: GHC.Show.Show
                                                                                             (XMonad.Layout.Full
                                                                                                GHC.Word.Word64))
  XMonad.Layout.$fShowChoose_$cshow @ (XMonad.Layout.Mirror
                                         XMonad.Layout.Tall)
                                    @ XMonad.Layout.Full
                                    @ GHC.Word.Word64
                                    $dShow
                                    $dShow1
  = Main.$s$fLayoutClassChoosea_$s$fShowChoose_$cshow
"SPEC/Main $fShowChoose_$cshow @ Tall @ (Choose
                                          (Mirror Tall) Full) @ Word64" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                      (XMonad.Layout.Tall
                                                                                                                                                         GHC.Word.Word64))
                                                                                                                                        ($dShow :: GHC.Show.Show
                                                                                                                                                     (XMonad.Layout.Choose
                                                                                                                                                        (XMonad.Layout.Mirror
                                                                                                                                                           XMonad.Layout.Tall)
                                                                                                                                                        XMonad.Layout.Full
                                                                                                                                                        GHC.Word.Word64))
  XMonad.Layout.$fShowChoose_$cshow @ XMonad.Layout.Tall
                                    @ (XMonad.Layout.Choose
                                         (XMonad.Layout.Mirror XMonad.Layout.Tall)
                                         XMonad.Layout.Full)
                                    @ GHC.Word.Word64
                                    $dShow
                                    $dShow1
  = Main.$s$fLayoutClassChoosea_$s$fShowChoose_$cshow1
"SPEC/Main $fShowChoose_$cshowList @ (Mirror Tall) @ Full @ Word64" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                                  (XMonad.Layout.Mirror
                                                                                                     XMonad.Layout.Tall
                                                                                                     GHC.Word.Word64))
                                                                                    ($dShow :: GHC.Show.Show
                                                                                                 (XMonad.Layout.Full
                                                                                                    GHC.Word.Word64))
  XMonad.Layout.$fShowChoose_$cshowList @ (XMonad.Layout.Mirror
                                             XMonad.Layout.Tall)
                                        @ XMonad.Layout.Full
                                        @ GHC.Word.Word64
                                        $dShow
                                        $dShow1
  = Main.$s$fLayoutClassChoosea_$s$fShowChoose_$cshowList
"SPEC/Main $fShowChoose_$cshowList @ Tall @ (Choose
                                              (Mirror Tall) Full) @ Word64" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                              (XMonad.Layout.Tall
                                                                                                                                                                 GHC.Word.Word64))
                                                                                                                                                ($dShow :: GHC.Show.Show
                                                                                                                                                             (XMonad.Layout.Choose
                                                                                                                                                                (XMonad.Layout.Mirror
                                                                                                                                                                   XMonad.Layout.Tall)
                                                                                                                                                                XMonad.Layout.Full
                                                                                                                                                                GHC.Word.Word64))
  XMonad.Layout.$fShowChoose_$cshowList @ XMonad.Layout.Tall
                                        @ (XMonad.Layout.Choose
                                             (XMonad.Layout.Mirror XMonad.Layout.Tall)
                                             XMonad.Layout.Full)
                                        @ GHC.Word.Word64
                                        $dShow
                                        $dShow1
  = Main.$s$fLayoutClassChoosea_$s$fShowChoose_$cshowList1
"SPEC/Main $fShowMirror @ Tall @ Word64" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                      (XMonad.Layout.Tall
                                                                         GHC.Word.Word64))
  XMonad.Layout.$fShowMirror @ XMonad.Layout.Tall
                             @ GHC.Word.Word64
                             $dShow
  = Main.$s$fLayoutClassChoosea_$s$fShowMirror
"SPEC/Main $fShowModifiedLayout @ AvoidStruts @ (Choose
                                                  Tall (Choose (Mirror Tall) Full)) @ Word64" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                    (XMonad.Hooks.ManageDocks.AvoidStruts
                                                                                                                                                                                       GHC.Word.Word64))
                                                                                                                                                                      ($dShow :: GHC.Show.Show
                                                                                                                                                                                   (XMonad.Layout.Choose
                                                                                                                                                                                      XMonad.Layout.Tall
                                                                                                                                                                                      (XMonad.Layout.Choose
                                                                                                                                                                                         (XMonad.Layout.Mirror
                                                                                                                                                                                            XMonad.Layout.Tall)
                                                                                                                                                                                         XMonad.Layout.Full)
                                                                                                                                                                                      GHC.Word.Word64))
  XMonad.Layout.LayoutModifier.$fShowModifiedLayout @ XMonad.Hooks.ManageDocks.AvoidStruts
                                                    @ (XMonad.Layout.Choose
                                                         XMonad.Layout.Tall
                                                         (XMonad.Layout.Choose
                                                            (XMonad.Layout.Mirror
                                                               XMonad.Layout.Tall)
                                                            XMonad.Layout.Full))
                                                    @ GHC.Word.Word64
                                                    $dShow
                                                    $dShow1
  = Main.$s$fLayoutClassModifiedLayouta_$s$fShowModifiedLayout
"SPEC/Main $fShowModifiedLayout_$cshow @ AvoidStruts @ (Choose
                                                         Tall (Choose (Mirror Tall) Full)) @ Word64" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                                  (XMonad.Hooks.ManageDocks.AvoidStruts
                                                                                                                                                                                                     GHC.Word.Word64))
                                                                                                                                                                                    ($dShow :: GHC.Show.Show
                                                                                                                                                                                                 (XMonad.Layout.Choose
                                                                                                                                                                                                    XMonad.Layout.Tall
                                                                                                                                                                                                    (XMonad.Layout.Choose
                                                                                                                                                                                                       (XMonad.Layout.Mirror
                                                                                                                                                                                                          XMonad.Layout.Tall)
                                                                                                                                                                                                       XMonad.Layout.Full)
                                                                                                                                                                                                    GHC.Word.Word64))
  XMonad.Layout.LayoutModifier.$fShowModifiedLayout_$cshow @ XMonad.Hooks.ManageDocks.AvoidStruts
                                                           @ (XMonad.Layout.Choose
                                                                XMonad.Layout.Tall
                                                                (XMonad.Layout.Choose
                                                                   (XMonad.Layout.Mirror
                                                                      XMonad.Layout.Tall)
                                                                   XMonad.Layout.Full))
                                                           @ GHC.Word.Word64
                                                           $dShow
                                                           $dShow1
  = Main.$s$fLayoutClassModifiedLayouta_$s$fShowModifiedLayout_$cshow
"SPEC/Main $fShowModifiedLayout_$cshowList @ AvoidStruts @ (Choose
                                                             Tall
                                                             (Choose (Mirror Tall) Full)) @ Word64" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                                                                                                       (XMonad.Hooks.ManageDocks.AvoidStruts
                                                                                                                                                                                                                                                                          GHC.Word.Word64))
                                                                                                                                                                                                                                                         ($dShow :: GHC.Show.Show
                                                                                                                                                                                                                                                                      (XMonad.Layout.Choose
                                                                                                                                                                                                                                                                         XMonad.Layout.Tall
                                                                                                                                                                                                                                                                         (XMonad.Layout.Choose
                                                                                                                                                                                                                                                                            (XMonad.Layout.Mirror
                                                                                                                                                                                                                                                                               XMonad.Layout.Tall)
                                                                                                                                                                                                                                                                            XMonad.Layout.Full)
                                                                                                                                                                                                                                                                         GHC.Word.Word64))
  XMonad.Layout.LayoutModifier.$fShowModifiedLayout_$cshowList @ XMonad.Hooks.ManageDocks.AvoidStruts
                                                               @ (XMonad.Layout.Choose
                                                                    XMonad.Layout.Tall
                                                                    (XMonad.Layout.Choose
                                                                       (XMonad.Layout.Mirror
                                                                          XMonad.Layout.Tall)
                                                                       XMonad.Layout.Full))
                                                               @ GHC.Word.Word64
                                                               $dShow
                                                               $dShow1
  = Main.$s$fLayoutClassModifiedLayouta_$s$fShowModifiedLayout_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

